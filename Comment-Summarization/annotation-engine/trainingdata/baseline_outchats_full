T1 0 u_Fran&#231;ois Andrieux : Using the wrong <code>delete</code> isn&#39;t the same as freeing memory that was already freed. Keep in mind that <code>delete</code> isn&#39;t <code>free</code>. <code>delete</code> does eventually cause memory to be freed but it also ends an object&#39;s lifetime and calls the destructor.
T2 0 u_Firefly : And its actually not freeing already freed memory, its trying to delete memory which you dont own and/or is nothing to do with <code>table</code>.
T2 0 u_Fran&#231;ois Andrieux : @TheGoldKnight23 Can you please explain how you came to that conclusion?
T2 0 u_Firefly : delete[] will delete the current pointer then look for the other elements of the array, even if they dont exist. Which means that when it is called on a single pointer it goes on a rampage of destruction as it never finds the bounds of the array and it is completely undefined as to what happens at that point
T1 0 u_Fran&#231;ois Andrieux : @TheGoldKnight23 That is just what <i>might</i> happen when you use the wrong <code>delete</code>. It&#39;s Undefined Behavior. No single possible outcome is any more valid than any other. It might work fine sometimes. It might not crash and corrupt a bunch of data. It might even crash before it reaches the <code>delete</code>. It&#39;s incorrect to presume how UB will manifest.
T2 0 u_Firefly : Sure, but it will definitely cause a deletion of something (possibly many somethings) next to it on the heap and then we have objects of type X being destructed as objects of type A (fun :D). But the above segfault is not caused by freeing already freed memory but by using the wrong delete
T2 0 u_Fran&#231;ois Andrieux : @TheGoldKnight23 Yes, using the wrong <code>delete</code> is a problem that needs to be fixed. No, it won&#39;t necessarily delete something. It might not even delete <code>table</code> at all! You may be interested in reading about <a href="https://stackoverflow.com/questions/24527401/undefined-behavior-causing-time-travel">time traveling Undefined Behavior</a>. It&#39;s real.
T2 0 u_VHS : @Fran&#231;oisAndrieux <code>delete</code> indeed frees up memory pointed to by a pointer (and calls destructor).  OP is using the delete array operator instead of the plain <code>delete</code>.
T1 0 u_Fran&#231;ois Andrieux : @VHS Of course, but the problem with using the wrong <code>delete</code> is that it is Undefined Behavior. You can&#39;t assume it will be a <i>memory</i> problem. <code>delete</code> is not <code>free</code>. It could just as well crash because it tried to execute a destructor with a bad <code>this</code>. I can fail for all sorts of reasons. Bringing in memory management is an error in this answer.
T1 0 u_VHS : @Fran&#231;oisAndrieux, I tried to reword my answer. I also read your link to the post about time traveling UB. It appears as if such &#39;time travel&#39; may occur when the compiler sees a UB statically and optimizes it. However, in OP&#39;s case, a compiler may not be able to detect a UB and therefore, the <code>delete[] table</code> instruction would be executed at run time.
T1 0 u_Fran&#231;ois Andrieux : @VHS Maybe time traveling UB won&#39;t occur here but it&#39;s just an example to illustrate that UB can do <i>anything</i>. As a c++ developer you are required to not presume what UB will do. It&#39;s not because we can&#39;t think of a reason it would act a certain way that it never will. There could be any number of other reasons that <code>delete[]</code> isn&#39;t reached or that <code>delete[]</code> would not reach the point of freeing memory,.
T3 0 u_ : @Jon: Out of curiosity, why did they set their clocks back by such a "weird" interval? Anything like an hour would have seemed logical, but how come it was 5:52mins? 
T3 0 u_ : @Johannes: To make it a more globally normal time zone, I believe - the resulting offset is UTC+8. Paris did the same sort of thing in 1911 for example: timeanddate.com/worldclock/clockchange.html?n=195&year=1911 
T3 0 u_ : @Jon Do you happen to know if Java/.NET copes with September in 1752? I always used to love showing people cal 9 1752 on unix systems 
T3 0 u_ : @Mr Moose: I believe Joda Time will do different things depending on the calendar you pick, and Noda Time will when we implement cutover calendars. I don't know about the "native" Java / .NET classes. 
T3 0 u_ : Does this mean that, somewhere in the Java date libraries, there's logic handling this very edge case (and every other bizarre edge case)? 
T4 0 u_ : @yahelc: Nope - there's just general time zone code, which handles all kinds of historical time zone transitions. 
T4 0 u_ : @yahelc, to elaborate: time zone changes are basically a small set of different possible parameterized events. The code implements this set of events, and a timezone database supplies a list of events and parameters for each timezone. By the way, this timezone database can be updated independently of the JRE itself: oracle.com/technetwork/java/javase/tzupdater-readme-136440.html 
T4 0 u_ : So why the heck was Shanghai 5 minutes out of wack in the first place? 
T4 0 u_ : @Charles: Lots of places were had less conventional offsets back then. In some countries, different towns each had their own offset to be as close to geographically correct as possible. 
T4 0 u_ : I understand the reasoning behind it, and why it's implemented like this. I personally think the result should be 'undetermined' at best. The way it's implemented now is as if the first occurrences of 23:54:08-23:59:59 never happened. 1 and 353 would both be a correct answer. Technically 2 different timezone's are subtracted which doesn't feel like correct behavior. 
T4 0 u_ : @It'sme...Alex: No, there's only one time zone here - with two different UTC offsets. A better API would allow you to determine which instant you meant when parsing an ambiguous local time, of course :) 
T4 0 u_ : @Jon Skeet: ok, two different UTC offsets :-) ... But you understand what I mean. The implementation in java (and most likely other libraries as well) is a bit poor 
T4 0 u_ : @It'sme...Alex: Well java.util.Calendar and java.util.Date are certainly poor in a number of ways. In Noda Time, when you convert a LocalDateTime to a ZonedDateTime, you have to give an indication of how you want to handle ambiguous or skipped instants. 
T4 0 u_ : Is there a complete listing of all such time corrections that have been done in all of history? 
T4 0 u_ : @JonSkeet If this answer is correct, then it might be wise to add it to your answer too, that way it's super up to date 
T4 0 u_ : @DanTemple: That answer isn't really correct - the time zone database changed the transition time slightly, but if you edit the original program appropriately, you'll still see a discontinuity. 
T4 0 u_ : I now see why Tom Scott says to just not do this. youtube.com/watch?v=-5wpm-gesOY 
T4 0 u_ : Tom Scott also has a video on leap seconds @BenC.R.Leggiero: youtube.com/watch?v=Uqjg8Kk1HXo. (This one is from Tom Scott's own YouTube channel, not from Computerphile.) 
T4 0 u_ : @Jon Skeet, I am not able to understand the difference. You have both times from the same time zone, if you add or subtract time to a time zone, both times must get affected. Then difference should be only one second. Can you please explain with numbers? 
T4 0 u_ : @GopsAB: What do you mean by "both times from the same time zone"? Ignore Shanghai for the moment - do you live in a time zone that observes daylight saving time? If so, what time does it change? That's a good way of seeing local time change by a different amount from UTC...] 
T4 0 u_ : @JonSkeet Yes, I meant time1 and time2 in the program are from the same time zone. Isn't? 
T4 0 u_ : @GopsAB: Yes, but I don't think that means what you think it means. "Same time zone" doesn't mean "same UTC offset". For example, I'm in the time zone identified as "Europe/London". Once a year, our local time jumps forward by an hour. Once a year, our local time falls back by an hour. In both cases, two universal times which are one second apart end up having local times which are much more than a second apart. 
T4 0 u_ : @GopsAB: It's not true for local times, because local times go forward or back quite often, usually due to DST. Again - do you live in a culture with daylight saving time? And what do you mean by "both times will get changed"? It's really not clear what's confusing you. 
T4 0 u_ : I am from India, No DST used in India. What I understood the implementation is something like an array structure, where reducing all the elements by a time will not change the arithmetic operations. To be more clear, a = [1,2,3,4,5], a[1]-a[2] is 1. reduce a by 1,a will be [0,1,2,3,4] , again a[1]-a[0] gives the same answer. I hope it clears my understanding. 
T6 0 u_Mox : So it&#39;s byRef in regards to objects and byVal in regards to primitives?
T6 0 u_user1767316 : @mox please read: Objects are not passed by reference, this is a ledgend: String a=new String(&quot;unchanged&quot;);
T5 0 u_ : public void changeit(String changeit){changit = "changed";} changeIt(a); assert(a.equals("unchanged")); 
T6 0 u_Loduwijk : This is yet another great example of the fallacy of the &quot;it is not pass by reference&quot; semantics argument. This answer says right in the bold, first sentence: &quot;only references are passed.&quot; Either a reference is passed, or a reference is not passed. You just said yourself that a reference is passed. By saying &quot;it is not passed by reference since <i>a reference is passed</i> but...&quot; you are trying to make a point by mangling English.
T5 0 u_philipxy : @Aaron &quot;Pass by reference&quot; does not mean &quot;pass a value that is a member of a type that is called a &#39;reference&#39; in Java&quot;. The two uses of &quot;reference&quot; mean different things.
T5 0 u_Loduwijk : @philipxy Because of some very arbitrary decision that has been made by a sub-set of the software community. What you describe is an opinion of how &quot;Pass by reference&quot; works, not a universally accepted definition. Even if you cite a few computer science books which agree with you, that only means that those authors share your opinion. English is English, and no matter how much the &quot;pass by reference definition purists&quot; want to argue the point they are merely arguing semantics about a non-universal opinion. Some of the answers here are nit-picky about the subjective definition of a nit.
T5 0 u_zakmck : Quite confusing answer. The reason why you can&#39;t change a string object in a method, which is passed by reference, is that String objects are immutable by design and you can&#39;t do things like <code>strParam.setChar ( i, newValue )</code>. That said, strings, as anything else, are passed by value and, since String is a non-primitive type, that value is a reference to the thing that was created with new, and you can check this by using String.intern().
T5 0 u_zakmck : Instead, You can&#39;t change a string via param = &quot;another string&quot; (equivalent to new String ( &quot;another string&quot; ) ) because the reference value of param (which now points to &quot;another string&quot;) cannot come back from the method&#39;s body. But that&#39;s true for any other object, the difference is that, when the class interface allows for it, you can do param.changeMe() and the top level object being referred will change because param is pointing at it, despite param&#39;s reference value itself (the addressed location, in C terms) cannot pop up back from the method.
T8 0 u_David Rodr&#237;guez - dribeas : Forgot to mention insertion costs. In a LinkedList, once you have the correct position, insertion costs O(1), while in an ArrayList it goes up to O(n) - all elements past the insertion point must be moved.
T8 0 u_Ryan Cox : Regarding the use of Vector: There really is no need to fall back to Vector. The way to do this is with your preferred List implementation and a call to synchronizedList to give it a synchronized wrapper. See: <a href="http://java.sun.com/docs/books/tutorial/collections/implementations/wrapper.html" rel="nofollow noreferrer">java.sun.com/docs/books/tutorial/collections/implementations&zwnj;&#8203;/&hellip;</a>
T8 0 u_Alex Beardsley : Also note that as of Java 6 there&#39;s no need to worry about losing performance with a thread-safe class.  The JVM is smart enough to optimize those locks away from you if you don&#39;t need them.
T8 0 u_Kevin Brock : Linked list add is not always O(1) [or this should say <code>addLast()</code> is O(1)]. This is only true if done from within a ListIterator. The add methods in Java&#39;s LinkList implementation must search through the list if additions are not on the head or tail. So worst case this is O(n/2) (which really is O(n); but I wrote it this way as it searches forward or backward depending on the given index so is only over at most half the list).
T7 0 u_ : @Ken Brock That's add(int,E) vs add(E). 
T8 0 u_dhblah : why LinkedList get is O(n), if you know the position it&#39;s O(1), isn&#39;t it?
T8 0 u_Jonathan Tran : No, for a LinkedList, get is still O(n) even if you know the position, because in order to get to that position, the underlying implementation has to walk the linked list&#39;s &quot;next&quot; pointers to get to that position&#39;s value. There is no such thing as random access. For position 2, walking the pointers might be cheap, but for position 1 million, not so cheap. The point is, it&#39;s proportional to the position, which means it&#39;s O(n).
T8 0 u_schmmd : With an ArrayList, your memory is close together which can improve performance.
T8 0 u_Kevin : @schmmd Then explain why memory is called Random-access Memory?
T8 0 u_Jonathan Tran : @Kevin memory is random-access. But how do you know which spot in memory to read? For an array/ArrayList, you can calculate the address in memory by multiplying the element size times the position in the array, because they&#39;re stored contiguously. But for a LinkedList, you can&#39;t do that. Each element stores the address of the next.
T8 0 u_Kevin : @Johnathan Tran Great comment but, my point was that it shouldn&#39;t be a difference if &#39;memory is close together&#39;.
T8 0 u_Jonathan Tran : @Kevin It may matter that memory is &quot;close together&quot;. Hardware will cache contiguous blocks of memory (dynamic RAM) into faster static RAM in the L1 or L2 cache. In theory and most of the time practically, memory can be treated as random-access. But in reality, reading through memory sequentially will be slightly faster than in random order. For a performance-critical loop, this could matter. They call it &quot;spatial locality&quot; or <a href="http://en.wikipedia.org/wiki/Locality_of_reference" rel="nofollow noreferrer">locality of reference</a>.
T8 0 u_jsravn : This answer glossed over the worst aspect of LinkedList - significantly more allocations than an ArrayList. This can increase the constant time significantly compared to an ArrayList. Also, Vector is not really thread safe - it must still be safely published due to internal non-guarded state (one of the reasons Vector has been deprecated).
T8 0 u_yingted : In order to get O(1) time for seeking, you have to call listIterator(0) and always use that for sequential (forwards or backwards) seeking.
T8 0 u_Geek : @JonathanTran you said removal from a linked list takes O(N) and then you say &quot;LinkedList allows for constant-time insertions or removals&quot; . isn&#39;t this contradictory ?
T8 0 u_paulw1128 : @Geek remove from position X is O(N) as the list must be traversed to reach the relevant position before doing the actual remove. Iterator.remove is O(1) because it makes use of the constant-time remove without having to traverse the list (i.e. removing the current element).
T8 0 u_Krzysztof Krasoń : remove in ArrayList is O(1) if you remove from the end, it&#39;s O(n) only if you remove in the middle (so you can implement an efficient stack by using add, remove from the end)
T8 0 u_Giovanni Botta : Worth noting that contains() takes O(n) in both cases.
T8 0 u_supercat : If one wishes to remove many items from an <code>ArrayList</code> on a single pass of an iterator, is the total time O(N) or O(N^2)?  I know I&#39;d implement it to be the former.
T8 0 u_FlyingGuy : It all really comes down to the size of the L2 cache.  ArrayLists are faster then linked list as long as you are withing the size of the L2 cache.  As soon as what you are storing exceeds the size of the L2 cache, it really does not mater that much, go with the linked list.
T8 0 u_Matthias : I think that, similarly to <code>ArrayList&lt;E&gt;#remove(int index)</code> being O(n - index), you could also argue that <code>LinkedList&lt;E&gt;#remove(int index)</code> is in fact O(index + 1). To see why, consider that removing the first element in a <code>LinkedList</code> could only really be O(1). Who (dis)agrees?  [Note that this doesn&#39;t mean it is wrong to say that <code>LinkedList&lt;E&gt;#remove(int index)</code> is O(n), because the order of magnitude of index is of course n].
T7 0 u_ : Non locality of data hurts the LinkedList even in the case of iterating over the elements: david-soroko.blogspot.co.uk/2015/06/… 
T8 0 u_rndStr : Furthering the discussion of the performance of LinkedList.get, the documentation states that &quot;the list will be treversed from the end, when the position is beyond half way&quot;, so &quot;get&quot; would be O(n/2).
T8 0 u_xenoterracide : having read and I think understand this... I would think LinkedList would be preferred default as I personally thing using <code>get</code> is code smell. I rarely want/need it
T8 0 u_Holger : There’s no such thing as <code>O(n&#47;2)</code> or <code>O(n&#47;4)</code>. The big O notation tells you how an operation <i>scales</i> with larger <i>n</i>. and an operation needing <code>n&#47;2</code> steps scales exactly like an operation needing <code>n</code> steps, which is the reason why constant summands or factors are removed. <code>O(n&#47;2)</code> and <code>O(n&#47;4)</code> are both just <code>O(n)</code>. <code>LinkedList</code> and <code>ArrayList</code> have different constant factors anyway, so it wouldn’t make sence to compare a <code>O(n&#47;2)</code> of one with a <code>O(n&#47;4)</code> of the other, both just denote linearly scaling operations.
T8 0 u_AdamSkywalker : @Andreas, use theta notation if you want to show that average is N/4, big O is not made for that
T8 0 u_James Lawson : It&#39;s acceptable to add constants to Big-O/Big-Theta to emphasise an additional operation / explain a particular case. For example, when we talk about the complexity of reading from a hash table, you&#39;ll often see: O(1 + load factor). Yes, that 1 means nothing asymptotically, but it&#39;s useful to emphasise that there is a O(1) lookup followed by O(load factor) to follow any chains for collision hashes. Here, we&#39;re writing O(n/4) more to explain <i>what</i> &quot;average&quot; case is. Asymptotically, the factor makes no difference, but it&#39;s useful for briefly summarising what &quot;average&quot; means for the operation.
T8 0 u_Mani : guys when i was going through vector&#39;s usage and differences i found that though vector synchronizes it is not thread safe. please <a href="http://stackoverflow.com/questions/1386275/why-is-java-vector-class-considered-obsolete-or-deprecated">refer this</a>
T8 0 u_Groostav : I think its important to mention: if your implementing something that is pure on the <code>Stack</code> (aka <code>Deque</code>) abstraction, requiring that the performance-critical portions of your work use only <code>push</code> and <code>pop</code>, then <code>LinkedList</code> gives you O(1) performance in compact memory without any amortization, which sounds pretty good to me.
T8 0 u_Haakon L&#248;tveit : While this is an excellent answer, it seems to me that what you really are saying is that you&#39;d use LinkedList lists to build a large collection of varying size and then iterate over all the elements. Meanwhile, ArrayList lists are faster if you need to look up varying positions and not just iterate. (If you need to insert at random places a tree-like or map-like structure may be better so long as its ordered, like TreeMap)
T8 0 u_Holger : @Groostav <code>LinkedList</code> is all but “compact memory”. If you need a stack or deque, use <a href="https://docs.oracle.com/javase/8/docs/api/?java/util/ArrayDeque.html" rel="nofollow noreferrer"><code>ArrayDeque</code></a> which gives you O(1) performance in truly compact memory.
T8 0 u_Ben Kushigian : This is already covered somewhat above but to make it explicit, <code>addLast</code> is O(1) as well which is not obvious when discussing linked lists.
T8 0 u_linuxNoob : What is meant by <code>Iterator.remove()</code> is O(1) for linked list? We still need to create the iterator and iterate over the list right? Shouldn&#39;t it be O(n) unless the element to be removed is at the end where the current pointer lies?
T8 0 u_Bill K : @linuxNoob Iterator.remove() can only operate on the linked list as it&#39;s being traversed, so it is always O(1).  LinkedList.remove() would be O(n) unless it was the first item you were removing.
T8 0 u_linuxNoob : @BillK When you say operating on the linked list as its being traversed, it still means traversing through the list one element at a time right? Which means if it&#39;s not the current element then I&#39;d have to traverse through the list (potentially unknown number of elements) before I can remove it?
T8 0 u_Bill K : @linuxNoob Yes.  If you are doing an operation (let&#39;s say searching for a value) you must traverse the list be it linked or array.  If it&#39;s a linked list then when you find your target, deleting it is O(1), if it&#39;s an array list deleting it is O(n).  Moreover if you are scanning a list to delete, say, multiple entries with a certain trait then your operation becomes O(n) for a linked list and O(n^2) for an array list.  I once &quot;Fixed&quot; an operation (Insertion sort) taking 6 hours down to seconds by JUST replacing an arraylist with a linked list. (then fixed it better with a sorted set)
T8 0 u_Eitanos30 : @Bill K, why did you say that iterate over both linked list and array list cost constant time? Isn’t it O(n) since it is the cost for iterating over all the elements?
T8 0 u_Bill K : @Eitanos30 Iterating over either list is not constant, it&#39;s O(n), however deleting a single element when you are in the middle of iterating over it is O(1) for a linked list and O(n) for an ArrayList.  If you look at the entire operation of removing &quot;n&quot; elements from a list in a single pass, it&#39;s O(n) for a linked list and O(n^2) for an ArrayList
T8 0 u_Eitanos30 : @Bill K, I understand, but you wrote in your answer the following sentence: <i>&quot;Iterating over either kind of List is practically equally cheap. (Iterating over an ArrayList is technically faster, but unless you&#39;re doing something really performance-sensitive, you shouldn&#39;t worry about this -- they&#39;re both</i> <b>constants</b>.)&quot;. What did you mean when saying constant here?
T8 0 u_Bill K : @Eitanos30 Sorry, not my answer.  It&#39;s CW and I don&#39;t think I ever contributed to it except for a couple comments.  Since it&#39;s CW I suggest you go in and edit it.
T7 0 u_ : @Bill K, sorry how can i edit it? 
T7 0 u_Bill K : @Eitanos30  There should be a share/edit/flag link under the post.  It looks like you have sufficient rep to edit a CW (I think the limit is 100, but this question is high activity so they might change it.).  I think what he meant, by the way, is that the increase is linear (constant) as the list grows... but you are right that it&#39;s not completely clear.
T7 0 u_ : @Bikl K thanks. I will delete it 
T9 0 u_andygavin : Useful if you don&#39;t know the API perhaps, but if you are having to test private methods in this manner there is something up with your design. As another poster says unit testing should test the class&#39;s contract: if the contract is too broad and instantiates too much of the system then the design should be addressed.
T10 0 u_Rick Minerich : Very useful.  Using this it is important to keep in mind that it would fail badly if tests were run post obfuscation.
T10 0 u_Cem Catikkas : True... Anything Reflective will fail miserably after obfuscation.
T9 0 u_ : The example code didn't work for me, but this made thigs clearer: java2s.com/Tutorial/Java/0125__Reflection/… 
T10 0 u_despot : This is all great (I&#39;ve been doing the same for a long time), but there is one glitch that I am trying to find the solution for. Imagine that u wanna test the exception outcome of the private method. Instead of the method invocation giving u an IllegalArgumentException, for example, you&#39;ll get null Class:java.lang.reflect.InvocationTargetException. Maybe there is a way of covering this, but I am not familiar with it. A colegue of mine proposed using powermock for it.
T10 0 u_Michael Piefel : Much better than using reflection directly would be to use some library for it such as <a href="http://code.google.com/p/powermock/wiki/BypassEncapsulation" rel="nofollow noreferrer">Powermock</a>.
T10 0 u_livefree75 : Thank you &quot;Rob&quot; for the link.  My test was failing at the getDeclaredMethod() call because I wasn&#39;t passing it the parameter arguments.
T9 0 u_ : @despot: According to the doc, you should be able to retrieve the original exception via getTargetException() or getCause(). 
T10 0 u_Thorbj&#248;rn Ravn Andersen : This is why Test Driven Design is helpful.  It helps you figure out what needs to be exposed in order to validate behavior.
T10 0 u_Asim Ghaffar : Here is an example for <b>MyAdder.sum(int, int)</b> ---   <code>MyAdder object = new MyAdder(); Method method = MyAdder.class.getDeclaredMethod(&quot;sum&quot;, new Class[] { Integer.TYPE, Integer.TYPE }); method.setAccessible(true); Object r = method.invoke(object, new Object[] { 1, 2 }); Assert.assertEquals(3l, ((Integer) r).longValue());</code>
T10 0 u_JBoy : shouldn&#39;t that be getClass().getDeclaredMethod() ?
T10 0 u_Josef.B : Though this is the excepted answer, I would echo some other answers that say one should use a mocking library for this, like Powermock or JMockit.
T10 0 u_Tom&#225;š Z&#225;lusk&#253; : <i>&quot;you can&#39;t change private static final variables through reflection&quot;</i> is not true - final fields can be changed via trick based on clearing <code>Modifier.FINAL</code> flag bit of the <code>Field.modifiers</code> field (unless cases where forbidden by security manager or primitive is inlined by compiler).
T10 0 u_juanmf : Legacy or not, you shouldn&#39;t change visibility for testing purposes. +1 to Reflection in any case.
T10 0 u_gKaur : For further details on accessing private methods refer <a href="http://stackoverflow.com/questions/880365/any-way-to-invoke-a-private-method/18909973#18909973">link</a>
T10 0 u_Legna : if you are using ExpectedException, keep in mid that exception you might expect will be wrapped by a InvocationTargetException, so you should do something like : 	    try {             method.invoke(svc, request);         }         catch (InvocationTargetException e) {             throw ((Exception)e.getCause());         }
T10 0 u_Rog&#233;rio : It&#39;s sad to see such a <i>terribly wrong</i> answer like this get so many upvotes. One should <i>not</i> reduce the accessibility of methods or fields, neither access them through Reflection. I have written literally thousands of JUnit/TestNG over many years, and I <i>never</i> had to resort to testing <code>private</code> methods directly. Occasionally, I had to read a <code>private</code> field (through Reflection), but that was about it. I guess some developers (many, apparently) are too lazy to write proper tests (which only call <code>public</code> methods), and prefer to cheat by using Reflection.
T10 0 u_BeUndead : These should really be wrapped in helper methods so you don&#39;t have to repeat that every time (and naturally...  there are several frameworks that do that already).  Also; you can most definitely set <code>private static final</code> variables through reflection.  Whether you <i>should</i> or not is another matter.
T10 0 u_Jonathan Neufeld : No I don&#39;t think appealing to TDD is a valid criticism here.  Why should a unit test intended to cover a private method be excluded from that encapsulation?  If TDD is supposed to tell you to make that method public, you&#39;re not producing quality code here, instead you&#39;re appeasing a logical flaw in the language itself.
T10 0 u_mike rodent : Few of these replies and comments appear to have picked on this: the question <b>could</b> have been about approaches to legacy code, except that the OP has included the TDD tag.  I don&#39;t have a huge amount of TDD experience yet, but if you study the &quot;seminal&quot; <i>Growing Obj-Oriented Software Guided by Tests</i>, I think it becomes clear: private methods should <b>result from</b> refactoring and only from refactoring.  By definition refactoring means that the code has passed the relevant tests.  So I think the question is why this TDD tag was included.
T10 0 u_Espen : testing private methods should be done from public members, private members that are not invoked directly or indirectly by public members have no value. Unit testing and TDD is not about directly testing every method written, it is about testing the behavior of the written code compared to the requirements for writing that code.
T10 0 u_mvreijn : Most purists fail to acknowledge that there are legitimate cases for this. My case: I am writing a plug-in for a (closed source) commercial product. Writing regular unit tests for <i>public</i> methods involves mocking large parts of that product, and there are limits to this approach. Being able to test my <i>private</i> methods in the manner described above ensures that 95% of my code has been tested before deployment.
T10 0 u_Max Heiber : In all the answers and comments that poo-poo testing private methods, no one gave a good reason to conflate modularity and access. I like to break my code into small pieces, where each of these pieces do one thing. This aids readability and maintainability. Just because something makes sense as its own chunk of code doesn&#39;t mean I have to expose it as part of the contract for the class. Am I missing something?
T10 0 u_Daniel : This guys provides a more in-depth explanation <a href="https://youtu.be/agnblS47F18?t=24m23s" rel="nofollow noreferrer">youtu.be/agnblS47F18?t=24m23s</a>. Check at 24:23 for a solution similar to the example above.
T10 0 u_ACV : One problem with testing private methods with reflection is that if you delete your method, you won&#39;t see it in the tests at compile time.
T10 0 u_WesternGun : PowerMock Whitebox reads private fields with reflection. So I think I have my answer: test private internal states with PowerMock, or just reflection without the overhead of introducing another independency, and private methods: don&#39;t test.
T10 0 u_Phlip : &quot;if you are having to test private methods in this manner there is something up with your design.&quot; Well I&#39;m TDDing an Android app, so... yeah.
T9 0 u_MasterJoe2 : @RickMinerich - Beginner here. what is obfuscation ?
T9 0 u_MasterJoe2 : @CemCatikkas - I am not asking for any guarantees here. Is Manifold&#39;s Jailbreak library reliable enough to be considered for use in commercial software products ? I don&#39;t know if it is just an obscure project which is likely to be abandoned in the near future.
T12 0 u_Aman Arora : They why the output shows different values every time i run it ? I am running on the same machine
T11 0 u_Philipp Sander : basicly yes. a computer is a working machine and has more or less stuff to do
T11 0 u_Aman Arora : in the <code>catch(Error e), </code> call other functions, If stack is full, how it is working?
T11 0 u_Aman Arora : check the edit please.
T11 0 u_Aman Arora : Please check the second code . Its not terminating. How it id getting stack to print ?
T11 0 u_Philipp Sander : it prints the stack, because the programm is still running (in an unstable condition). it is not terminating because calling b() in b() is an endless loop ;)
T13 0 u_lance-java : I think the poster doesn&#39;t want the file packed inside a jar and wants it in a directory where it can be tweaked without unzipping &amp; zipping again
T14 0 u_VHS : I would tweak my answer if OP confirms that&#39;s what he needs.
T14 0 u_mike01010 : @VHS - your answer is closest to what i a want, in particular, Ans 2.2. Yes lance, i want it externally. So i specified the entry in build.gradle as you indicated, and i see now that when i do a gradle build, it creates a /my_app1/build/resources/main folder. I am still not able to read this with the code i have above however. the error is: &quot;java.io.FileNotFoundException: \config.dev.properties (The system cannot find the path specified)&quot;
T14 0 u_mike01010 : @VHS, I am debugging this through eclipse after building it.  Wondering if i have to let eclipse know where the resource files are for a given project?
T14 0 u_VHS : @mike01010, if you are debugging it through <code>Eclipse</code>, the relative paths are all relative to the project folder - the folder which has the<code>src</code> folder. So if your <code>build</code> folder is at the same level as <code>src</code>, you can use <code>build&#47;resources&#47;main&#47;config.dev.properties</code>.
T14 0 u_mike01010 : @VHS, that works, but i don&#39;t think that code is deployable, since there won&#39;t be a &#39;build&#39; folder when deployed.  would be nice if the relative path works for both debugging in eclipse as well as runtime
T13 0 u_VHS : @mike01010, I understand your concern. That&#39;s why people recommend reading files from classpath instead of from a relative path. If a resource file is on classpath, you don&#39;t need to specify any path regardless of whether the run time is within eclipse or outside.
T13 0 u_mike01010 : @VHS can you point me how to do that.  i actually did try renaming the config folder to &#39;resources&#39; and using ClassLoader.class.getResourceAsStream, to no avail.  Also, does this method allow us to change config entries without having to re-build and re-deploy?
T13 0 u_ : See if this helps. 
T13 0 u_mike01010 : @VHS thanks, seems like that will compile the config into the jar.  not an option for us. We&#39;d like to change values in the config at run-time.  will try to figure out best way to do this
T15 0 u_Michael : Thanks @IAdapter.  Note that you should always do a compile before hand because it will just put whatever is in &quot;target/classes&quot; in the JAR.  This will ensure that the JAR includes any changes you recently made to the source code.  So, you should do something like: <code>mvn clean compile assembly:single</code>.
T16 0 u_Duncan Jones : I&#39;ve edited the question to include the phase binding. I removed the deprecated assembly goal, because no-one needs to know about that.
T16 0 u_Sahil Dave : I&#39;ve associated the assembly:single goal with the package phase in my project&#39;s pom.xml, but it works only when I do a mvn assembly:single from the command line.
T16 0 u_Prashant Vaidyanathan : Is here any way I can direct the &lt;mainClass&gt; to a class under the test directory? I have a main class under org.core (the directory structure exists under main and test) but maven only includes compiled classes from main and not test.
T16 0 u_ : Can we use this metod for java fx jar. Our the default ant jar task is better. But i am facing issues of dependencies with ant jar task.look my Question stackoverflow.com/questions/25915793/… 
T15 0 u_pitchblack408 : I see that this doesn&#39;t add the jars to the uber jar, instead this just adds all the class files to the jar.
T15 0 u_maxivis : Tip: you can also add the element <code>&lt;appendAssemblyId&gt;false&lt;&#47;appendAssemblyId&gt;</code> into the <code>configuration</code> to avoid the annoying &quot;-jar-with-dependencies&quot; suffix in the name
T16 0 u_prayagupd : forget <code>compile</code> and you are screwed.
T16 0 u_user3774109 : maven assembly plugin could introduce some issues because could override some dependencies, so I cannot tell you to use it! Use the maven Shade plugin instead which works very nice for us. We spent some days to found that the maven assembly plugin overrides some dependencies which break application jar. Have a look there : <a href="https://www.mkyong.com/maven/create-a-fat-jar-file-maven-shade-plugin/" rel="nofollow noreferrer">mkyong.com/maven/create-a-fat-jar-file-maven-shade-plugin</a>
T16 0 u_Niklas R. : 8 levels of wrapping is insane overdoing it
T16 0 u_Raffi Khatchadourian : @maxivis Doing this seems to work but generates some warnings.
T15 0 u_parlad : what if i don&#39;t have main method or class, i just need some random java file to be jar?
T16 0 u_ : @parladneupane leave out the <archive> ...</archive> portion 
T16 0 u_user10201743 : He do not asked to use plugings, maven should be able compile with dependencies itself without strange commands and plugings
T15 0 u_Adowrath : @user10201743 Just to give a little context: <i>Everything</i> in Maven is a plugin. The compiler? <code>maven-compiler-plugin</code>. Tests? <code>maven-surefire-plugin</code>. These two, including the assembly, are official maven plugins, so they might as well be considered as part of maven (esp. cause, at least now, all three of them are in your effective POM by default).
T16 0 u_Richard Bradley Smith : I ran into this with the alexa-skills-kit-sdk-for-java which worked well until the instructions to create the WAR barfed in Maven. In &#39;Developing Your First Skill&#39; it says enter the line command &#39;mvn org.apache.maven.plugins:maven-assembly-plugin:2.6:assembly -DdescriptorId=jar-with-dependencies package&#39; which does not work. I put the above plug-in in the &#39;highest POM&#39; (closest to the root file) and ran the line command &#39;mvn clean compile assembly:single&#39; from that POM (directory) and it worked perfectly.
T16 0 u_Halil İbrahim Oymacı : For example if your main class path is <code>src&#47;main&#47;java&#47;com&#47;example&#47;ui&#47;Main.java</code>, you must write like that to pom.xml: <code>&lt;mainClass&gt;com.example.ui.Main&lt;&#47;mainClass&gt;</code>.
T17 0 u_Piotr Findeisen : Actually <code>thread.stop()</code> does not necessarily prevent <code>finally</code> block from being executed.
T18 0 u_Andrzej Doyle : How about we say that the <code>finally</code> block will be called <i>after</i> the <code>try</code> block, and <i>before</i> control passes to the following statements.  That&#39;s consistent with the try block involving an infinite loop and hence the finally block never actually being invoked.
T18 0 u_dieend : By @andrzejDoyle definition, it will return <code>success</code> first before going to <code>finally</code> block. Is that correct?
T18 0 u_Laurent LA RIZZA : @dieend: It will decide that the return value will be success, executes the finally block, then gives back control to the calling function. Nothing will be returned if the finally block throws.
T17 0 u_ruhungry : there is also another case, when we use nested <b>try-catch-finally</b> blocks
T17 0 u_Amrish Pandey : also, finally block is not called in case of exception thrown by daemon thread.
T18 0 u_ : But effective java says otherwise. informit.com/articles/article.aspx?p=1216151&seqNum=7 
T18 0 u_Mikhail Krutov : This is rather interesting that finally would be called when one re-throws his exception in catch() as new RuntimeException.
T18 0 u_avmohan : @BinoyBabu - That&#39;s about finalizer, not finally block
T18 0 u_ : What about Runtime#halt ? 
T18 0 u_SusanW : @AmrishPandey &quot;finally block is not called in case of exception thrown by daemon thread&quot; - really?? [Citation Needed], I think?
T18 0 u_ : @SusanW javarevisited.blogspot.in/2012/03/… 
T18 0 u_ : @SusanW docs.oracle.com/javase/tutorial/essential/exceptions/… 
T17 0 u_SusanW : @AmrishPandey The Oracle page doesn&#39;t mention daemons at all. The other (blogger) page discusses a JVM <i>terminating</i>, but fails to go on to show any difference vs a non-daemon thread. Reality is: on System.exit completion (incl shutdown hooks) or other termination, all threads just die where they are standing whether daemon or not: no finallys get executed either way. The blogger is incorrect where they note this as a difference ... try it yourself.
T18 0 u_Stephen C : @SusanW - Correct.  The reason that the daemon thread is not executing <code>finally</code> in that example is reason 3).  It is in an infinite loop.  If the loop wasn&#39;t there, then it could also fail to execute the <code>finally</code> for reason 1).  When <code>main</code> method returns (and there are no non-daemon threads) it executes <code>System.exit()</code> ... or the equivalent.  Bottom line: daemon threads are NOT an exception to the reasons given by the Answer above.
T17 0 u_Loduwijk : Infinite loop is not really an exception to the &quot;finally will be called when try block finishes&quot; rule. Even with an infinite loop in the try block, the finally block still <i>will</i> execute <b><i>when the try block finishes</i></b>, as usual - the try block just does not finish. This is not a special case.
T18 0 u_Loduwijk : &quot;The host system dies; eg. power failure, hardware error...&quot; is not really an exception to the finally block rule either. That&#39;s like &quot;will <code>return 1+1</code> always return 2?&quot; &quot;Not necessarily; a power loss can stop <code>return 1+1</code> from returning 2.&quot; ... not really a part of the answer. Same thing with #4, the <code>kill -9</code> example; it is sufficient for #4 and #5 both that #2 &quot;JVM crash&quot; is listed, which could be worded &quot;JVM terminates abruptly&quot; to better catch all situations.
T18 0 u_ : finally is also executed when a StackOverflowError is thrown. 
T18 0 u_D&#225;vid Horv&#225;th : Java&#39;s<code>System.exit();</code> (like C#&#39;s or PHP&#39;s) can be confusing for developers coming from other programming languages. In Python <code>sys.exit()</code> raises a (regular) <code>SystemExit</code> exception that can be catched. In Pascal <code>exit</code> is a regular control statement, and <code>finally</code> will be executed too.
T18 0 u_Mike Hill : @MCEmperor, to piggy-back on this, although <code>finally</code> is executed even after a <code>StackOverflowError</code>, frames added to the stack within a <code>finally</code> block can cause an unexpected <i>additional</i> <code>StackOverflowError</code>, leading to the remaining contents of the <code>finally</code> block being skipped. For this reason, <code>StackOverflowError</code> errors can be quite dangerous. We recently ran into a difficult issue with semaphores not being released in a <code>finally</code> block for this very reason.
T18 0 u_JugsteR : Q: Does it always? A: Yes, except... To me this means the accepted answer should be no. If there is exceptions to always, then its no. It may run most of the time. But not always. I am surprised I am one of few to react on this.
T18 0 u_Nishit : Also, finally won&#39;t be called if the world ends before the execution reaches the finally block...
T18 0 u_Captain Man : @JugsteR All of the cases when it doesn&#39;t is when something crazy happens like someone force killing the process, it entering an infinite loop, or the power going out. To me, if it behaves a certain way except in those most extreme of edge cases it&#39;s fine to say &quot;yes always, except...&quot; instead of &quot;no&quot;. Actually, in the case of an infinite loop, it <i>would</i> still execute the finally, it&#39;s just that it never finishes what it&#39;s doing before it.
T18 0 u_Anonymous Coward : If the machine is suspended. If the kernel never again gives the JVM time to execute. There are probably many more edge cases when finally is not executed. This answer gives a good and easy to understand explanation. But it would be easier and more simple to say <i>&quot;If the try block or try-catch block completes then the finally block is executed.&quot;</i> The JLS uses this same kind of language.
T18 0 u_anir : Can someone shed more light on last point <code>If finally block is going to be executed by daemon thread and all other non daemon threads exit before finally is called.</code>?
T18 0 u_SusanW : @anir The JVM itself will terminate when the last non-daemon thread terminates (that&#39;s the defn of a daemon thread, btw: it won&#39;t prevent the JVM from exiting). So if your daemon thread had entered the try-block, and the last non-daemon terminated, then the JVM will exit and all daemons will abruptly vanish.
T19 0 u_Drew Noakes : Except it&#39;s O(N) to create the collection in the first place :)
T19 0 u_Xr. : If it&#39;s static, it&#39;s probably going to be used quite a few times. So, the time consumed to initialise the set has good chances of being quite small compared to the cost of a lot of linear searches.
T20 0 u_Tom Hawtin - tackline : Creating then the collection is going to be dominated by code loading time (which is technically O(n) but practically constant).
T19 0 u_Basil Bourque : @TomHawtin-tackline Why do you say &quot;in particular here we want a set&quot;? What is the advantage of a Set (HashSet) in this case? Why is a &quot;reference array&quot; bad (by &quot;reference array&quot; do you mean an ArrayList backed by an array as generated by a call to <code>Arrays.asList</code>)?
T20 0 u_Tom Hawtin - tackline : @BasilBourque The problem trying to be solved is determining whether a value is within a set of values. A <code>Set</code> is a very good fit. / By &quot;reference array&quot; I mean a Java language array of reference types. Arrays of primitives, whilst not great, are a bit short of efficient alternatives without some necessary clunky library. A later version of Java could support immutable selfless/value types, which would change things.
T20 0 u_nmr : isn&#39;t this lookup actually O(log(n))
T19 0 u_Tom Hawtin - tackline : @nmr A <code>TreeSet</code> would be <code>O(log n)</code>. <code>HashSet</code>s are scaled such that the mean number of elements in a bucket is roughly constant. At least for arrays up to 2^30. There may be affects from, say, hardware caches which the big-O analysis ignores. Also assumes the hash function is working effectively.
T20 0 u_Thorbj&#248;rn Ravn Andersen : you have to iterate the array to create the collection. O(n). You can then argue that amortized or simiar this evens out, but you must have an O(n) step somewhere.
T20 0 u_Bill K : This answer is completely right.  The point most of the commenters miss is that if you were placing the objects into a collection in the first place it wouldn&#39;t be much more time than creating the array was.  Just avoid using arrays unless you are absolutely sure nothing else will do (For performance purposes), using an array because you think it will be faster without testing to see if the collection is actually too slow in the first place is a perfect example of premature optimization.
T20 0 u_Paulo Oliveira : For me this solution with Set is way more elegant than the accepted answer. Thanks.
T19 0 u_Minn : This doesn&#39;t answer the question about the array. You just say &quot;don&#39;t use arrays&quot; which is not a solution. Additionally, you just say &quot;X is bad&quot; but don&#39;t explain why which is always bad for an answer.
T20 0 u_kaya3 : At least in the OpenJDK implementation, the four-parameter <code>Set.of</code> method doesn&#39;t return a HashSet data structure; for so few elements, that would not be efficient. See the code here:  <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/86f19074aad2/src/java.base/share/classes/java/util/ImmutableCollections.java#l309" rel="nofollow noreferrer">hg.openjdk.java.net/jdk9/jdk9/jdk/file/86f19074aad2/src/&hellip;</a>
T20 0 u_Tom Hawtin - tackline : @kaya3 Good. Big-O is for sufficiently large (i.e. quite large) n. I believe C# has had some kind of hybrid implementation from day 1, or perhaps 2.0.
T21 0 u_gsingh2011 : So I supposed it&#39;s not possible to call a super constructor and another constructor of the same class as both need to be the first line?
T21 0 u_Jon Skeet : @gsingh2011: Indeed. You can only chain to <i>one</i> other constructor.
T21 0 u_Christian Fries : This has to appear on the first line, but you can do calculations in the constructor before it is called: You can use static methods in the arguments of this() on the first line and encapsulate any calculation which has to be performed before the call to the other constructor in that static method. (I have added this as a separate answer).
T21 0 u_Ali : @gsingh2011 I know it&#39;s late but as a way around, you can call overloaded constructor using this(...) and then in that overloaded constructor, you can make a call to base class&#39; constructor using super(...)
T22 0 u_Trikaldarshi : @JonSkeet  Yes! we can chain to one other constructor but actually  we can have a very long chain
T22 0 u_Jon Skeet : @Mohit: And why is that a problem? It&#39;s really not clear what the context of your comment is...
T22 0 u_Trikaldarshi : no not a problem i just added up to your comment that said &quot;only one other constructor&quot; so for many others create a long chain
T22 0 u_Harshit Gupta : It is mandatory that if you are using this() or super() they must be the first statement of the constructor and both can not be used in a constructor.
T22 0 u_Francis : @gsingh2011 yes, for some reason only a single constructor of a class is allowed.
T22 0 u_Jon Skeet : @Francis: I assume you mean &quot;you can only chain to one other constructor&quot; - currently your statement makes it sound like you can only <i>have</i> one constructor per class, which is clearly not true.
T22 0 u_Francis : @JonSkeet yup I meant chaining to one other constructor only. thanks for the correction and I apologize for my misleading statement.
T22 0 u_Justin Time - Reinstate Monica : @Francis I&#39;m not sure, but I believe the reason is that if the first line of the constructor delegates to another constructor or calls a superclass constructor, it actually runs <i>before</i> the object is constructed.  C++ has the same limit, you can only have one call to a parent class constructor or (as of C++11) one delegation per constructor, and no more, with both executing before the object is constructed.
T22 0 u_Jon Skeet : @JustinTime: You&#39;d have to define what you mean by &quot;before the object is constructed&quot; for me to be able to judge the truth of that...
T22 0 u_Justin Time - Reinstate Monica : @JonSkeet I mean that going from what I know of Java, delegation or superclass constructor calls are executed before the object&#39;s fields are initialised and it&#39;s put into a state where it&#39;s considered to be &quot;constructed&quot;.  Specifically, I believe the process is: 1) Run parent class/superclass constructor to initialise inherited portion of the class, 2) Initialise instance-specific member variables so the object is valid, so member access in the constructor&#39;s body won&#39;t break anything, 3) Execute body of constructor to finish construction.  It&#39;s considered constructed by the end of step 3.
T22 0 u_Justin Time - Reinstate Monica : In that regard, I believe it works in the same manner as C++ (construct inherited portion, initialise object from initialisation list, run body of constructor), but with cleaner, but less specific, syntax (the initialisation list is moved to the top of the constructor&#39;s body, instead of being after the signature but before the body), with delegation passing the job of actually <i>creating</i> the object to the other constructor, and then running any code in the delegating constructor on a valid object after the constructor it delegates to returns.  Correct me if I&#39;m wrong.
T22 0 u_Jon Skeet : @JustinTime: Again, it depends on what you mean by &quot;creating&quot; - the object is &quot;created&quot; in that its memory is allocated and the type is set before any constructor bodies are executed. Constructors are initialization rather than creation. In particular, the type of the object is its &quot;final&quot; type right from the start - so if you call any virtual methods from constructors, you&#39;ll get the most-specific override called. I believe this differs from C++.
T22 0 u_Justin Time - Reinstate Monica : By creating the object, I mean allocating memory, setting the type, and initialising fields, so that the object is in a valid, usable state (the implicit first step of every constructor), with delegation passing the job of making the object valid &amp; usable onto the constructor that&#39;s delegated to.  Didn&#39;t know that objects don&#39;t start as their actual type in C++, but it makes sense considering how C++ implicitly chains parent class constructor(s) to construct the inherited portion of a derived class before actually executing the derived class&#39; constructor; I guess I&#39;ll have to be wary of that.
T22 0 u_Andrej : I know I am coming late to the comment section, but I don&#39;t understand why <code>new Foo(1);</code> wouldn&#39;t work ?
T21 0 u_Jon Skeet : @Andrej: That would indeed be &quot;calling one constructor from another&quot; but it wouldn&#39;t be doing what the OP wants, which is to initialize a single object via multiple constructors, one chaining to another. Creating two objects by just creating a separate object within one constructor call isn&#39;t the same thing at all.
T23 0 u_koppor : If many constructor parameters are used, consider a builder. See Item 2 of &quot;Effective Java&quot; by Joshua Bloch.
T23 0 u_YoYo : The problem with the implementation of the last approach using the factory method, <code>newCons</code>, is that you are trying to change state of an object, using <code>setArg1(...)</code>, that should most likely have its fields set as final. As we are trying to keep as much as possible of an object immutable, if not completely, a builder pattern will address this issue more correctly.
T23 0 u_LordHieros : Wouldn&#39;t you rather do :: public Cons() {   this(madeUpArg1Value,madeUpArg2Value);  }
T24 0 u_Rodney P. Barbati : Initialization should proceed from least to greatest - I would never have a default constructor call up the chain to a multi-parameter constructor.  What needs to happen is that all constructors call either the default or a constructor with less parameters.
T23 0 u_Joshua Taylor : @RodneyP.Barbati It&#39;s pretty common in Java for lower-arity constructors to call greater-arity constructors <i>and then do nothing else</i>.  if a class K has, e.g., two final fields a, b, then the &quot;general constructor&quot; would be <code>K(A a, B b) { this.a = a; this.b = b; }</code>.  Then, if <code>b</code> has a reasonable default, there can be a one-arg constructor <code>K(A a) { this(a, DEFAULT_B); }</code>, and if there&#39;s a default <code>a</code> as well, we have a default constructor: <code>K() { this(DEFAULT_A); }</code>.  That&#39;s a pretty common convention in Java.
T24 0 u_Joshua Taylor : @RodneyP.Barbati If you have a final field (so that it must be set), then the default constructor would have to set it.  If your higher-arity constructors call the default constructor (which would have to be done before anything else), then the higher-arity constructors never have any options to set any of those fields.
T23 0 u_Hong : This one works with Android Studio while the accepted answer does not.  Not sure why.
T26 0 u_hooknc : Exactly, well put.  What behavior are we trying to overwrite in Thread by extending it?  I would argue most people are not trying to overwrite any behavior, but trying to use behavior of Thread.
T26 0 u_ : As a side comment, if you instantiate a Thread and do not call its start() method you are creating a memory leak in Java < 5 (this does not happen with Runnables): stackoverflow.com/questions/107823/… 
T26 0 u_user949300 : One minor advantage of Runnable is that, if in certain circumstances you don&#39;t care about, or don&#39;t want to use threading, and you just want to execute the code, you have the option to simply call run().  e.g. (very handwavy)  <code>if (numberCores &gt; 4) myExecutor.excute(myRunnable); else myRunnable.run()</code>
T26 0 u_m0skit0 : @user949300 you can also do that with <code>extends Thread</code> and if you don&#39;t want threading why would you even implement <code>Runnable</code>...
T25 0 u_brettw : I would also add that by implementing Runnable now rather than extending Thread, you make it easy for a future refactor of using thread-pools, timers, schedulers, and Executors.
T26 0 u_8bitjunkie : To paraphrase Sierra and Bates, a key benefit of implementing Runnable is that you are architecturally seperating the &quot;job&quot; from the &quot;runner&quot;.
T25 0 u_Isaac : Another addition to the &quot;practical terms&quot; bit: a <code>Runnable</code> is, really, an encapsulation of any bit of code. Under certain circumstances, it may be useful to run a <code>Runnable</code> even when not within the context of a new thread.
T26 0 u_lolski : @m0skit0 the point of the code by user949300 is that it uses a conditional to only enable multi-threading when there are enough physical core
T26 0 u_m0skit0 : @lolski My point being you can do that extending Thread or implementing Runnable, so really doesn&#39;t matter.
T25 0 u_Jon Skeet : @m0skit0: It doesn&#39;t matter if you don&#39;t care about your code expressing what you&#39;re interested in. Personally I care about that very much. Yes, you <i>can</i> extend <code>Thread</code> just to implement <code>Runnable</code>... heck, you can pass one <code>Thread</code> instance to the constructor of another <code>Thread</code> instance. That doesn&#39;t mean it&#39;s a good idea.
T26 0 u_m0skit0 : @JonSkeet Sorry, I didn&#39;t mean it doesn&#39;t matter to extend Thread or implement Runnable, I meant that that was not a valid argument for implementing Runnable :)
T26 0 u_Jon Skeet : @m0skit0: <i>What</i> wasn&#39;t a valid argument for implementing <code>Runnable</code>? You implement <code>Runnable</code> if you want to represent &quot;something that can be run&quot; - it doesn&#39;t necessarily have to be in a new thread.
T26 0 u_user253751 : Note that sometimes you (conceptually) <i>are</i> creating &quot;runners&quot;, not &quot;jobs&quot;. E.g. if you&#39;re writing a thread pool (for whatever reason).
T26 0 u_homerun : @JonSkeet i&#39;m currently creating a class that handles Threads, for example: <a href="http://pastebin.com/QNc8xY46" rel="nofollow noreferrer">pastebin.com/QNc8xY46</a>. is it OK, or terribly  wrong to do so?
T25 0 u_Jon Skeet : @somefolk: Well it feels terribly wrong to have public methods beginning with <code>_</code>, and having both <code>start()</code> and <code>_start()</code> is <i>really</i> confusing... as is having an instance method called <code>_sleep()</code>, when there&#39;s a static <code>sleep</code> method. Not that your <code>_sleep</code> method actually <i>does</i> anything with the instance anyway. In general, this looks like a bad idea to me so far.
T26 0 u_ : The same answer is in official Java tutorials: docs.oracle.com/javase/tutorial/essential/concurrency/… 
T26 0 u_Warren Dew : A thread that performs a specific task &quot;is a&quot; thread in the object oriented Liskov substitution sense, so the philosophical argument is invalid.  The valid arguments for preferring Runnable are practical, and have to do with modularization of code, especially in cases where you only want multithreading for performance reasons.
T26 0 u_Small Legend : I know this is an old post, but I feel maybe you could elaborate a little more @JonSkeet give code snippets, pros and cons. As I believe some other answers are more worthy!
T26 0 u_Jon Skeet : @SmallLegend: I don&#39;t see any benefit in code snippets here - I&#39;ve basically explained the philosophical difference. You should generally extend a class if you&#39;re planning to change some of the behaviour it implements. When you extend <code>Thread</code> <i>just</i> to override <code>Runnable</code>, you&#39;re changing behaviour that isn&#39;t part of <code>Thread</code> itself.
T26 0 u_Small Legend : Okay, you know best! So generally, there are no situations where one would choose Thread over  Runnable? @JonSkeet
T26 0 u_Jon Skeet : @SmallLegend: Well if you were customising the actual threading behaviour you could, rather than just &quot;the task that it&#39;s going to run&quot;. Not sure what custom threading behaviour you would implement, admittedly...
T26 0 u_H2ONaCl : I think that composition being philosophically purer is an argument for extending an object. Since this answer is saying implementing Runnable is preferred to extending Thread, perhaps composition has nothing to do with the rationale.
T25 0 u_Jon Skeet : @H2ONaCl No, absolutely the opposite. Preferring composition over inheritance speaks <i>against</i> extending anything.
T26 0 u_AV94 : Will there be any difference in the execution times between the two approaches?
T26 0 u_Jon Skeet : @AV94: Not measurable, I expect.
T26 0 u_Lealo : If you make an extend thread that prints out &quot;hello&quot; - and make a class that implements runnable - that prints out &quot;hello&quot;, does that mean this is still true: &quot;You&#39;re not really specialising the thread&#39;s behaviour&quot; ?. I mean is there some mechanical things behind the scenes that make them different - or did Jon Skeet mean that you can potentially write more kind of code in an thread that extendend - and that that therefore have a greater risk of being screwed up with? How would telling an extend thread to print hello be more specializing than telling runnable to print hello? How?
T26 0 u_Jon Skeet : @Lealo: Implementing an interface isn&#39;t specialization... It&#39;s just providing the behaviour. The point is to separate the infrastructure involved in running &quot;some code&quot; on different thread, and what that code is. They are orthogonal concerns, so shouldn&#39;t be merged together via inheritance, IMO. I suspect if Java were redone from scratch today, this wouldn&#39;t even be an option.
T26 0 u_Lealo : Can you relate your point to the size of an thread that extends a class - to implementing the runnable interface. The thread class already contains the runnable interface. So I assume it somehow are bigger in size. By using extended thread you need (Thread: runnable interface - extending java.lang.object), but you can take out that runnable interface and use it independently. Also is this not then just as comparing (ice cream) with (ice cream + ice cream hornet)?
T26 0 u_Jon Skeet : @Lealo: The size is irrelevant to the point here. Yes, <code>Thread</code> implements <code>Runnable</code>, but that was a design mistake IMO.
T26 0 u_user253751 : @8bitjunkie But what if your &quot;unit of work&quot; <b>is</b> a &quot;runner&quot;? For example the &quot;work  unit&quot; done by the threads in a thread pool, which pulls other work units off a queue and executes them, forever.
T28 0 u_ : For reference, the Blah.valueOf("A") method is case sensitive and doesn't tolerate extraneous whitespace, thus the alternate solution proposed below by @JoséMi. 
T27 0 u_Kevin Meredith : @Michael Myers, Since this answer is the most voted up by far, should I understand that it&#39;s good practice to define an enum and its String value to be exactly the same?
T27 0 u_Michael Myers : @KevinMeredith: If you mean the <code>toString()</code> value, no, I wouldn&#39;t say that. <code>name()</code> will get you the actual defined name of the enum constant unless you override it.
T27 0 u_treesAreEverywhere : What exactly do you mean by &quot;are created at compile time and do not appear in source code.&quot; ?
T27 0 u_Ti Strga : @treesAreEverywhere More specifically, those methods are <i>generated</i> (or <i>synthesized</i>) by the compiler.  The actual <code>enum Blah {...}</code> definition shouldn&#39;t try to declare its own <code>values</code> nor <code>valuesOf</code>.  It&#39;s like how you can write &quot;AnyTypeName.class&quot; even though you never actually declared a &quot;class&quot; member variable; the compiler makes it all Just Work.  (This answer may no longer be useful to you 3 months later, but just in case.)
T28 0 u_Bill K : Great answer--in addition I&#39;ve found adding a few little helper methods to enums helps a lot... For instance, if you create a static map of lower-case entries in the constructor then you can add a method that looks the enum up in a case-insensitive way, or converts underbars to spaces so user input like &quot;Second Entry&quot; could map to an enum SECOND_ENTRY.
T28 0 u_nemetroid : Why does @Brett&#39;s comment have so many votes? Of course it&#39;s case sensitive and doesn&#39;t tolerate extraneous whitespace, anything else would be insane.
T28 0 u_maaartinus : @nemetroid Not that insane, given that whitespace is not allowed in names and that all enum names are uppecase by convention. So a tolerant lookup method is possible as the result stays unique. However, users may require something even more tolerant and therefore it&#39;s best to provide a canonical strict version (and there are other problems like uppercasing being locale-sensitive and whatever).
T27 0 u_Bex : Upvote, but this post would be even better with a mention of Enum::name
T29 0 u_Jon Skeet : This <i>does</i> jump to directly after the loop. Try it! Yes, the label comes before the loop, but that&#39;s because it&#39;s labeling the loop, rather than the place you want to exit to. (You can continue with a label too.)
T30 0 u_Evan Carroll : Perl also does permits this its own label system. I think a lot of languages do -- it hardly surprises me that it is in Java.
T29 0 u_Steve314 : @Evan - that claim is clearly true - in languages that promise that it&#39;s true. But Java doesn&#39;t make that promise. If a language is in conflict with your assumptions, it&#39;s possible that it&#39;s your assumptions that are at fault. In this case, I think you&#39;re still partly right - principle of least surprise WRT the many who never heard of (or forgot about) that form of <code>break</code>. Even then, exceptions are another better-known exception (sorry). But I&#39;d still be unhappy about this if it wasn&#39;t obvious (small loops, warning comment if the label/break still aren&#39;t visible enough).
T30 0 u_Steve314 : @boutta - Ada has this style of break spelled with an <code>exit &lt;optional-label&gt; when &lt;condition&gt;;</code> statement, and it has a <code>goto</code>, so you can put the label either end of the loop. IIRC, <code>goto</code> is much more frowned on than the <code>exit</code> version though. Even for <code>exit</code>, some people will beat you with a pretty big stick for using a &quot;hidden goto&quot;, but if you use a <i>blatant</i> goto...
T30 0 u_Krishnabhadra : Well one Jon skeet answer I don&#39;t like much, as I don&#39;t want to go through a code like this with all those labels.. But upvoted since it is allowed in the language..
T30 0 u_JWiley : JonSkeet or @BGR Why are break labels not ok? Or why do you prefer the other way?
T30 0 u_Jon Skeet : @JWiley: I usually find it&#39;s easier to read a method which returns from the middle of code.
T30 0 u_Bruno Grieder : @JWiley. Same here; easier to read: when you &quot;hit&quot; return, you can stop reading - easier to maintain: when fixing something before the return, you do not have to worry for side effects outside of the loop. IMHO, returning fast usually leads to more compact, simpler code.
T30 0 u_erhun : In Dijkstra&#39;s &quot;Goto considered harmful&quot; paper, what he specifically objected to was the labels, not the goto. He observed that the number of bugs seems to increase with the number of labels in a program, and that labels and gotos make programs difficult to analyze.
T30 0 u_Muhammad Babar : What is <code>outerloop</code>? No type? Even i tried to do same syntax error!
T29 0 u_Jon Skeet : @MuhammadBabar: <code>outerloop</code> is a label. I don&#39;t know exactly what code you tried, but the code in my answer compiles and runs just fine.
T30 0 u_Bruce Wayne : Does this paradigm work for breaking out of a loop inside a <code>switch-case</code> statement that is part of the loop?
T30 0 u_Jon Skeet : @Bruce: I suspect so, but I suggest you just try it.
T30 0 u_Earl Zedd : @erhun, Regarding labels, I would think that &quot;break to&quot; or &quot;continue to&quot; would be inherently more readable than &quot;go to&quot;, since the places you can break to or continue to are few and straightforward to find.
T30 0 u_Jon Skeet : @MinhasKamal: Please stop edits with things like putting &quot;EDIT&quot; in bold for no reason, and quoting pieces of output. Your proposed edit was no clearer, and clearly conflicted with my intended indentation etc.
T30 0 u_angryITguy : &quot;break outerloop&quot; == &quot;goto&quot; statement. uurgh! I use booleans as an explicit trigger to terminate a loop in the for statement when i have nested loops, single point of exit out of an inner loop and then further tests outside of each loop achieve the same thing, but IMHO is better for maintainability. Each to their own..
T30 0 u_Ralf Kleberhoff : It&#39;s a matter of readability. And I think the labeled break is perfectly readable, it explicitly declares the block it wants to leave, so to me it&#39;s even clearer than the unlabeled break. Having said that, if the nested loops fulfill some purpose that can be expressed with a method name (and doesn&#39;t need to pass a dozen of parameters), introduce the method. But I&#39;d definitely prefer the nested loops with labeled break to a method that&#39;s named &quot;loop&quot;.
T30 0 u_Nisarg Patil : I have sonarLint plugin installed in my IDE, while using <code>break</code> with label, sonarLint gives it as a <code>major codeSmell</code> and when I look at the description provided, it says <code>Labels are not commonly used in Java, and many developers do not understand how they work</code>. Is the reason provided legit?
T29 0 u_Jon Skeet : @NisargPatil: The reasoning seems sound, although I don&#39;t think I&#39;d call it a &quot;major code smell&quot;. As per the start of my answer though, I&#39;d prefer to just put it in a separate method.
T30 0 u_John McClane : Maybe you meant &quot;put <b>both loops</b> in a different method (or only body of the outer loop in case <code>continue</code> needed instead of <code>break</code>)&quot;?
T30 0 u_Jon Skeet : @JohnMcClane: It&#39;s hard to know exactly what I meant 9 years later, but I suspect you&#39;re right. Will edit.
T29 0 u_john16384 : @NisargPatil Just because it is in sonarLint doesn&#39;t make it a code smell.  It just means there was a developer that added this to sonarLint with a personal itch to scratch, and it is full of these kinds of rules that only make sense when abused, or because some developer has a personal hate crusade against them.  Labelled breaks and continues are a very elegant way to describe what you want to do.
T30 0 u_user10762593 : Unlike many commenters, I find nothing wrong with this construct. It&#39;s often clearer than flag variables. It doesn&#39;t to my mind have the problem that Dijkstra&#39;s complaint about label proliferation. With 1960s-vintage labels and goto, the presence of a label meant control could arrive there from almost anyway.  This sort of label is not a jump target, it&#39;s just naming a statement.  I do however find &#39;break foo&#39; to be a little odd from readability; BLISS had &#39;leave foo&#39; for this same construct, which makes much more sense linguistically speaking: we are leaving the statement named &#39;foo&#39;.
T30 0 u_Andrew Robie : Great info, but yeah, I can definitely see why you and other prefer having the loop in a method and returning instead.
T30 0 u_Neph : While I do like the <code>return</code> solution, sometimes the label solution is better because it doesn&#39;t interrupt the flow of reading (as a separate method would), e.g. if you&#39;ve got more code before and especially after the loops. @JonSkeet A suggestion: Add another print directly after the inner loop. This way you can &quot;prove&quot; that the <code>break</code> actually breaks both loops instead of jumping outside the inner loop and only then breaking the outer loop too.
T30 0 u_Jon Skeet : @Neph: I&#39;d rather not start editing a 10+ year old answer, having to rerun it etc. I haven&#39;t seen any sign that people need that &quot;proof&quot;. The fact that it doesn&#39;t show &quot;3 0&quot; seems proof enough to me.
T30 0 u_Neph : @JonSkeet I just ran it to test it and added the extra print because I wasn&#39;t sure how the break would work exactly. Not showing &quot;3 0&quot; just means that the inner loop is broken, it doesn&#39;t proof that it won&#39;t run code after the inner loop (so e.g. the extra print I suggested) before that outer loop is broken too. I can provide an edit for code and prints if you&#39;d like.
T30 0 u_Jon Skeet : @Neph: No, I really don&#39;t think it&#39;s worth adding the extra output.
T32 0 u_Usagi Miyamoto : The table above is incorrect, as even <code>private</code> members can be seen/used by any class/static method in the same source-file.
T31 0 u_niks : The protected member can only be accessed from subclass of same package but not subclass from different package. There should be a correction in above table
T32 0 u_Deepak : I am still not able to differentiate between &#39;Public&#39; and &#39;Protected&#39;. And what is &#39;World&#39; in this answer. Does it mean access out of project folder in a different project &amp; package?? But that is not taking place. Need help on this.
T32 0 u_adprocas : @Deepak, World is within your project. If you have a class that is public, any other class can instantiate that class. Same as methods. If it is public, anyone that uses that class can use that method. Package refers to the &quot;folder&quot; that you are in. So, <code>ca.my.package.controllers</code> is different than <code>ca.my.package.models</code>. Public items are accessible outside of those packages, but the rest are not. package-private are considered public within the package, essentially. Protected means anything that inherits it, or within the same package. Private removes all outside access, including package.
T31 0 u_adprocas : <i>World is within your project</i>. I should explain further. Libraries are within your project, and if you&#39;re creating a library, they would expose these public classes and methods as well. So, saying just within your project is a bit off. &quot;Everything that uses it&quot; is a better description.
T32 0 u_Deepak : @adpro - I tried at my end making methods public and protected but both of these types of methods are accessible outside their primary package and user has to extend the parent class in both the cases which is quite obvious. I am still unsure of the difference. A little bit more explanation or trick might help.
T32 0 u_adprocas : @Deepak, if you are extending (inheriting) the class then that class that is inheriting will have access to all public and protected methods and properties. If you instead instantiate that class in another class (not extend) and try to do something like <code>object.protectedMethod()</code> on a protected method, you won&#39;t be able to unless it is in the same package.
T31 0 u_adprocas : For example, if I have <code>MyClass</code> and I&#39;m doing <code>AnotherClass extends MyClass</code> I will have access to all protected and public methods and properties from within <code>AnotherClass</code>. If I do <code>MyClass myClass = new MyClass();</code> in <code>AnotherClass</code> somewhere - let&#39;s say the constructor - I will only have access to the public methods if it is in a different package. Note that if I do <code>= new MyClass() { @Override protected void protectedMethod() { &#47;&#47;some logic } };</code> it appears that I can access protected methods, but this kind of the same as extending it, but inline instead.
T31 0 u_Dawood ibn Kareem : Unfortunately, this answer is a gross oversimplification.  Reality is a bit more complicated, especially when you consider <code>protected</code> (which is actually quite a difficult access modifier to fully understand - most people who think they know what <code>protected</code> means really don&#39;t).  Also, as Bohemian pointed out, it doesn&#39;t answer the question - it says <i>nothing</i> about when to use each access modifier.  In my opinion, this answer isn&#39;t <i>quite</i> bad enough to downvote, but close.  But over 4000 upvotes?  How did this happen?
T32 0 u_Anatolii Stepaniuk : Subclass (same package) field is misleading, It&#39;s better to remove that column. Because it doesn&#39;t matter is that a subclass or not.
T31 0 u_Heinzlmaen : @DawoodsaysreinstateMonica It&#39;s a great answer, it&#39;s exactly what most people that find this page are looking for. Also, that table is from the official Oracle tutorial. But how about you toss us a link so we can learn what &quot;protected&quot; really means?
T33 0 u_ : Can you provide an example case with specific data where you think Days.daysBetween is incorrect? 
T34 0 u_Patrick M : When you say to use <code>Instant</code>, you&#39;re not just talking about <code>start.toInstant()</code>, are you?
T34 0 u_Alice Purcell : @PatrickM Yes, I was. On reflection, it&#39;s not clear exactly what constraints this is intended to impose, so I&#39;ll remove that last sentence. Thanks!
T34 0 u_Sujit Joshi : @chrispy daysBetween doc says it returns number of <b>WHOLE</b> days. In my case 2 days and 1 hour should return me 3 days. In your example it returns 2 days. Is there a way to achieve this?
T34 0 u_Alice Purcell : @SujitJoshi I&#39;m afraid I don&#39;t understand your question. I suggest posting a full Stack Overflow question and pasting a link here for me :)
T33 0 u_Sylphe : Beware of dates overlapping with a new year! Days between 31 dec 2016 and 5 jan 2017 gives -361 days.
T33 0 u_Alice Purcell : @Sylphe No, it doesn&#39;t, I just checked. I suspect you typo&#39;d 2017.
T33 0 u_Oleksandr Albul : What if cast to UTC DateTime withTimeAtStartOfDay is it equivalent ?
T33 0 u_Alice Purcell : @OleksandrAlbul That will only give you an answer valid in the UTC timezone.
T35 0 u_ : Pedantically, new Random(-229985452).nextInt(27) always returns 8. 
T35 0 u_roottraveller : @immibis why? i mean Random() should return random number every time, not a fix ordered number set?
T36 0 u_ : @rootTraveller For a start, new Random() doesn't return a number at all. 
T35 0 u_plugwash : @roottraveller &quot;Random&quot; is a deterministic psuedo-random number generator. If you initialise it with a fixed seed it will produce a fixed sequence of numbers.
T35 0 u_Sohit Gore : Is there a way these seeds are calculated? There must be some logic...or is it just brute force.
T35 0 u_Fund Monica&#39;s Lawsuit : @SohitGore Given that Java&#39;s default <code>Random</code> isn&#39;t cryptographically secure (I&#39;m pretty sure it&#39;s a Mersenne Twister, but don&#39;t quote me on that), it&#39;s probably possible to work backwards from &quot;I want these numbers&quot; to &quot;this is the seed I would use&quot;. I&#39;ve done something similar with the standard C linear congruential generator.
T38 0 u_One Two Three : Was this something the people who designed Java intentionally did (as an Easter egg?) It&#39;s just a bit mind-blowing that you could possibly product the <code>Hello, world</code> String, which just happens to be the most favourite string in any programming languages.
T37 0 u_Stephen C : @Vulcan - the javadoc says that the seed is 48 bits.  <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Random.html" rel="nofollow noreferrer">docs.oracle.com/javase/7/docs/api/java/util/Random.html</a>.  And besides, the actual seeds are 32 bit values.
T37 0 u_Russell Borogove : Each element of the random number sequence is taken modulo 27, and there are 6 elements in each of <code>&quot;hello\0&quot;</code> and <code>&quot;world\0&quot;</code>. If you assumed a truly random generator, the odds would be 1 in 27^6 (387,420,489) of getting the sequence you were looking for -- so it&#39;s pretty impressive but not quite mind-blowing!
T37 0 u_dan04 : @RussellBorogove: But with those odds, and 2^64 possible seeds, there are an expected 47.6 billion seed values that give that sequence.  It&#39;s just a matter of finding one.
T37 0 u_Russell Borogove : @dan04 -- I wasn&#39;t quite willing to make that estimate; depending on the implementation of the PRNG, the size of the seed word might not equal the size of the state, and sequence paths might not be evenly distributed. But still, the odds are definitely good, and if you couldn&#39;t find a pair you could try again with different casing (<code>&quot;Hello&quot;</code> <code>&quot;World&quot;</code>), or using <code>122-k</code> instead of <code>96+k</code>, or...
T37 0 u_user1020786 : @OneTwoThree It&#39;s almost always very important that a random number generator can be predictable when needed, as it&#39;s very hard to test things otherwise, as running the same code twice can produce different results. Using seeds in PRNGs means you can use a specific seed when testing (or at least report the seed so a result can be reproduced), and then later you can use a seed which will change - e.g. new Random() uses a seed taken from the current time.
T38 0 u_Thorbj&#248;rn Ravn Andersen : Note that the javadoc does not specify the exact details of the implementation.  Hence you cannot rely on this being portable across JVM implementations.
T38 0 u_ : @ThorbjørnRavnAndersen The Javadoc specifies that "particular algorithms are specified for the class Random. Java implementations must use all the algorithms shown here for the class Random, for the sake of absolute portability of Java code." 
T39 0 u_AndaP : Right on, in my opinion almost all documentation revolving around beans can&#39;t describe the term as concisely as you have. +1
T40 0 u_worldsayshi : Is it required for the members of a bean to also be beans? Seems like a reasonable requirement..
T39 0 u_Viliam B&#250;r : @worldsayshi - No, it&#39;s not required. For example a bean can contain a String; and String is not a bean. (String is immutable, so you cannot create it by calling an empty constructor and a setter.) It seems reasonable that a Serializable object should have Serializable members, unless it somehow serializes them from outside. So no, Java bean members do not need to have any aspect of Java beans. Although it is more <i>simple</i> if they are beans, too.
T39 0 u_Puce : &quot;All properties private&quot; is not correct. Properties are inferred from the getters and setters (if there is a method X getFoo() -&gt; the bean has a readable property called &quot;foo&quot;; if there is a method setFoo(X foo) -&gt; the bean has a writeable property called &quot;foo&quot;). Properties can be backed by member fields (but don&#39;t have to be) which are usually private.
T39 0 u_Satyabrata sahoo : I hope for being a Java bean &quot;a class must be Public&quot;. And is it really need that it should implement Serializable Interface??
T39 0 u_ncmathsadist : It sounds as if you should not declare state variables final, because you have a no-args constructor. Is this right?
T40 0 u_Paul Wintz : @ncmathsadist, yes, that must be the case.
T40 0 u_mavili : Thanks a lot! Why did I have to search everywhere to get to this? Why cannot people be as to the point as you have been with your answer?!! Such a hugely un-intuitive term for such a simple standard.
T40 0 u_OzzyTheGiant : @Puce I think that misnomer is due to the fact that in other OOP languages, member fields are called properties (JavaScript, PHP) or instance variables (Python). People seem to use these terms interchangeably.
T40 0 u_Giorgi Tsiklauri : That&#39;s all very concise, clear and nice; however, nowadays, a lot of people (in courses, tutorials, or even talks) refer the the <code>@Entity</code> (javax.persistence.entity) as to the Javabean class annotated with <code>@Entity</code> (for ORM mapping).. and.. <code>@Entity</code> classes do not implement java.io.Serializable.. that&#39;s what usually confuses me a bit, as I&#39;m a very picky and perfectionist type of person. Is <code>@Entity</code> a Javabean or something close to Javabean?
T41 0 u_ : @phonetagger Take a look at this followup question: stackoverflow.com/questions/11276291/… The Intel Compiler came pretty close to completely getting rid of the outer loop. 
T41 0 u_ : @Mysticial How does the train/compiler know that it has enter the wrong path ? 
T41 0 u_ : Under the modern C and C++ standards, the shifting hack is actually not implementation-defined behavior, but undefined behavior! Shifting a 1 in or out of the sign bit of a signed integer is no longer permissible. 
T41 0 u_ : @Novelocrat Only half of that is correct. Shifting a 1 into the sign-bit when it is zero is indeed UB. That's because it's signed integer overflow. But shifting a 1 out of the sign-bit is IB. Right-shifting a negative signed integer is IB. You can go into the argument that that C/C++ doesn't require that the top bit be the sign indicator. But implementation details are IB. 
T41 0 u_ : @Mystical readability of the 'hack' can be increased by introducing a method. E.g. in java private int sumIfGreaterThan128(int curSum, int value). The JIT compiler will inline it at runtime anyway. I guess in other languages there are equal optimizations available. 
T42 0 u_ : @Unheilig Using bitwise operations for anything other than legitimate bit manipulation or multiplying/dividing by a variable power-of-two is not something I usually recommend since it's often obfuscating. Nevertheless, here's a good reference for bit twiddling hacks: graphics.stanford.edu/~seander/bithacks.html 
T42 0 u_ : @Mysticial Thanks so much for the link. It looks promising. I will go though it. One last request. Sorry, but please don't mind, could you tell me how you could do this int t = (data[c] - 128) >> 31; sum += ~t & data[c]; to replace the original if-condition above? 
T42 0 u_ : @obe: Given hierarchical memory structures, it's impossible to say what the expense of a cache miss will be. It might miss in L1 and be resolved in slower L2, or miss in L3 and be resolved in system memory. However, unless for some bizarre reason this cache miss causes memory in a non-resident page to be loaded from disk, you have a good point... memory hasn't had access time in the range of milliseconds in about 25-30 years ;) 
T42 0 u_ : Would the conditional be faster than the hack if there was no branch prediction? The conditional would be (check) (jump) (add), whereas the hack uses 4 consecutive arithmetic operations 
T42 0 u_ : @woojoo666 That would depend on how expensive the 4 operations are with respect to the branch handling logic. So it'll probably vary on a case-by-case basis. 
T42 0 u_ : Isn't it possible to execute both branches in parallel and later stop execution of one wrong branch, Instead of predicting one branch? 
T42 0 u_ : @Tuğrul I would assume that for a given particle the chance that it collides with another particle is less than 1%. Then the branch prediction could just always predict no collision and would be >99% correct, whether sorted or not. In the end for fast collision check you'll want to use a tree structure anyways. 
T42 0 u_ : I wonder why is the branch prediction concept in place, what is the use of the (Branch Prediction)concept ? I mean without it we would get definite result with the sorted and unsorted array. 
T42 0 u_ : When does branch prediction takes place? When does language will know that array is sorted? I'm thinking of situation of array that looks like: [1,2,3,4,5,...998,999,1000, 3, 10001, 10002] ? will this obscure 3 increase running time? Will it be as long as unsorted array? 
T42 0 u_ : @FilipBartuzi Branch prediction happens in the processor while it is running the code. The language doesn't know anything. In your example, it will still be fast because you're only adding 1 or 2 mispredictions on and around the 3. 
T42 0 u_ : @BJHomer I tried it with Clang 3.5: debug sorted 9.3s, debug unsorted 24.6s. O2 sorted 5.0s, O2 unsorted also 5.0s. So it seems like Clang is able to optimize the loop well. The branchless version from the post took 13s for debug, 4.1s for O2, with almost no difference between sorted/unsorted. 
T42 0 u_ : This may be out of scope of this Q/A, but are there modern processors that will continue down both paths a short ways when the branch prediction reports similar odds for each branch? If not, why not? It would seem that spare cycles gone into ensuring the branch is ready in time is better than guessing incorrectly or just waiting around. 
T42 0 u_ : @SlippD.Thompson Probably not for the reasons I mentioned in an earlier comment.. 
T42 0 u_ : Rule of thumb for writing code that is efficient on a modern processor: Everything that makes the execution of your program more regular (less uneven) will tend to make it more efficient. The sort in this example has this effect because of branch prediction. Access locality (rather than far-and-wide random accesses) has this effect because of caches. 
T42 0 u_ : The grammar in me wants me to think this should read "... victim of branch prediction failure" rather than just "... victim of branch prediction fail." 
T42 0 u_ : So in Java's case, for example, does the branch prediction take place on the processor level or in the java runtime? 
T42 0 u_ : GCC has a lot of optimizations that aren't enabled by default, among the things it can do: 
T42 0 u_ : it can split loops (with -ftree-loop-distribution and -ftree-loop-distribute-patterns), move invariant sections (by default), move invariant conditions out of the loops (with -funswitch-loops, but causes duplication), convert conditional jumps to conditional stores or remove them (-ftree-loop-if-convert and -ftree-loop-if-convert-stores). Sadly a lot of these options have unsafe side effects, and only do any good improvement to very naively written code. 
T42 0 u_ : There is another fact here. The data and temporal locality. When you access the same position many times subsequently, its value still in the registers, so this is why the loop interchange doubles the performance over the original sorted version. 
T42 0 u_ : @Mysticial, Is this answer still valid given the processor changes now in 2015/6? 
T42 0 u_ : @Sandeep Yes. Processors still have branch prediction. If anything has changed, it's the compilers. Nowadays, I bet they're more likely to do what ICC and GCC (under -O3) did here - that is, remove the branch. Given how high profile this question is, it's very possible that compilers have been updated to specifically handle the case in this question. The definitely pay attention to SO. And it happened on this question where GCC was updated within 3 weeks. I don't see why it wouldn't happen here as well. 
T42 0 u_ : I just ran the code in VS 2015 and the sorting doesn't improve performance anymore. I measured about 1.1s for 32768 elements and about 11s for 327680 elements (moved to a global variable to prevent a stack overflow) with my Intel Core I5 with 3.6GHz thanks to TurboBoost. I looked to a disassembly and I didn't find any branch except one for terminating the loop - it actually uses instructions like cdq and movlpd which are normally used for floating point operations. 
T42 0 u_ : @One-One The prediction is done at the beginning of the pipeline, the operation flows through the pipeline and reaches a waiting area for its operands. Once its operands are available, the instruction executes and the instruction becomes eligible for retirement (commit to actual state). The retirement of the branch checks whether the guess was correct. If not, flush pipeline and restart instruction fetcher at correct instruction. If prediction was correct, just keep going. By this time, many instructions after the predicted branch have started but have not been committed to state. 
T42 0 u_ : Complementing... you can also use something like 'sum += (data[i] > 128) * data[i];', which is still branchless but same accuracy as the one with the branch. 
T42 0 u_ : What about the ternary operator? sum += data[i] > 128 ? data[i] : 0 
T42 0 u_ : @NicholasHamilton The ternary operator is a branch. Though some compilers (namely MSVC) seem to be better at optimizing them than plain-old if-statements. 
T42 0 u_ : Really good explication. If you add this code it become much more faster: for (register unsigned i = 0; i < 100000; ++i) { // Primary loop for (register unsigned c = 0; c < arraySize; ++c) { register int t=(data[c]<<25)>>31; sum += ~t & data[c]; } } 
T42 0 u_ : @Mysticial: Thanks for such a nice insight. After going through this came to my mind couple of questions: identify a pattern and follow it this sounds more of artificial intelligence. So is it safe to say modern compilers are equipped with AI algorithms for branch prediction? halt execution and wait until the previous instructions are complete that sounds to me of multiple threads. Does CPU internally breaks code blocks into threads? (One your comment also mentions processor is executing many instructions at the same time). If yes, what role does compiler play? 
T42 0 u_ : @Atul The Wikipedia article on branch prediction has examples of some branch prediction algorithms. Whether or not you want to call them "AIs" is up to you. For your other question about multiple instructions at the same time, it's called Superscalar Execution. 
T42 0 u_ : @Mysticial: Thanks! I took some time to go through article(s). What I gather is, branch prediction is more about processor architecture, no matter what compiler we use (unlike what I was under impression) 
T42 0 u_ : I still fail to understand why the compiler has to even predict?! Why does it not just compare the two values with each other and decides then?! 
T42 0 u_ : @EdwardBlack It's not the compiler that does the prediction. It's the processor. Secondly, the processor can't "just decide" because it's doing many things at the same time. To oversimplify things a bit, while the processor is executing the current instruction, it's already reading ahead by 20+ instructions and preparing them for execution. If you have a branch, the processor needs to decide which side to do this "read ahead". When there's a misprediction, everything that has been "read and prepared ahead of time" needs to be thrown away and restarted on the other side. 
T42 0 u_ : @EdwardBlack An appropriate analogy for this "read ahead" thing would be airline flight scheduling. Flight schedules are made months ahead of time. But when something unexpected happens (like a storm shutdowns down a major hub), flights get canceled and that schedule goes up in smoke. The result? Massive delays that propagate through to many flights that don't even touch that airport. Of course for a processor, the "pre-planning" window is on the order of nano-seconds and up to a few hundred instructions rather than thousands of flights that cover months. 
T42 0 u_ : This is a good answer but it should be made clear that it is processor branch prediction that is causing this behaviour. Compilers predict branches too. 
T42 0 u_ : As a side note, there has been some research done where branch predictors were able to "figure out the pattern of rand()". They had a branch that was basically if( rand.nextInt(100) < 50 ) and correctly predicted something like 99% of the time. 
T42 0 u_ : There were a few questions as to why the processor doesn't just execute both branches. One reason is that processors can have as many as 20 predictions in-flight (guessed but not resolved yet). To handle that many you'd need to be executing 2^20 (1048576) different paths at the same time. 
T42 0 u_ : @Riley I actually did answer the comments about executing both branches. But it seems that my comment got deleted for some reason. 
T42 0 u_ : @Mysticial Was your answer basically the same or is there another reason? 
T42 0 u_ : @Riley Same. Exponential resource growth and the fact that prediction is often very accurate. 
T42 0 u_ : @Adjit There's no simple answer to that. For the particular case here, GCC and ICC can do conditional moves, but VS can't. But that will change depending on the code. The example in this question is optimizeable to a conditional move. But not always. Only really simple branches can be optimized this way. 
T42 0 u_ : @Adjit No, that's way too specific. What to take away is that anything that causes the flow of execution to conditionally change is subject to a performance penalty due to branch misprediction. This includes if-statements, loop-conditions, switches, ternary operators, short-circuiting boolean logic, calls to function pointers, calls to lambdas, calls to virtual/polymorphic methods, etc... (The last 3 of these aren't related to branch-prediction per se, but the same concept applies in that the processor doesn't "know where to go" next.) 
T42 0 u_ : @Mysticial is there a particular reason you opted for your implementation (declaring an int) over sum += ~((data[c] - 128) >> 31) & data[c]; ? 
T42 0 u_ : @Zze No. That was just the way it turned out when I derived it. The variable being the mask that either enables the value, or sets it to zero. 
T42 0 u_ : @mysticial Does it mean that it is possible that the result of the program is incorrect because of the prediction? How does it know/validate whether the guessing is correct? Wouldn't that still need to actually compute everything to know the correct result for validation? 
T42 0 u_ : @elfan No. Branch prediction does not affect correctness. When the processor runs a set of instructions, it must behave "as if" it were running them line-by-line. It can play tricks underneath to make things faster (such as branch prediction), but in the end, it still must respect the program as it is written. For your other question, the processor will know when a prediction is correct once the branch instruction executes and determines which way it's supposed to go. 
T42 0 u_ : @Mysticial, does it mean in this case the code will complete in around 2 seconds (instead of 12) if there is no branch prediction, and that the extra 10 seconds was because of the overhead of wrong predictions (the train going back)? 
T42 0 u_ : @elfan No. As a hypothetical example: If there was no prediction, it would always take 10 seconds. With good prediction, it would be 2 seconds. With consistently bad prediction, it would be 12 seconds. The extra 2 seconds being the overhead of going back. In most cases, it will be closer to the 2 seconds, so it's a net win. 
T42 0 u_ : I see, so the 8 seconds was the overhead to stop the train and ask the driver every time. If there was no branch at all, and no branch prediction, then the code will always take 2 seconds (i.e. similar to the case that the prediction is always correct in a system with branch prediction). Thanks for your great explanation @Mysticial 
T42 0 u_ : More simplify way for: int t = (data[c] - 128) >> 31; sum += ~t & data[c]; is char t = data[c] >> 7 ; /* Truncating the 7 bits (equivalent to data[c] >=128 ) */ sum += -t & data[c]; /* -t will be equivalent to -1 if data[c] >= 128*/. 
T42 0 u_ : How does this influence (if at all) the evaluation of the complexity of an algorithm? 
T42 0 u_ : @njzk2 it doesn't. Complexity is the asymptotical behaviour of the time (or size) of a function when its inputs tends to infinity. Branch prediction failures doesn't change how the curve behaves at infinity, it only adds some constant computation time to the branch operation. 
T42 0 u_ : I question the efficacy of human minds when it comes to unnecessary overhead such as branch prediction. I just read up on the Wikipedia article—what smart person invented this so I can smack him upside? Just do two concurrent speculative executions for both branches and then discard the "wrong" branch's speculative execution. 
T42 0 u_ : @LinkTheProgrammer I'm not so sure the solution is that simple. Because if it was, they'd probably be doing that already. The main problem I see is that modern CPUs will be predicting multiple branches ahead. And that leads to an exponential state explosion if you want to follow them all. The other thing is that running down multiple paths means you'll be wasting a lot execution resources on stuff that will be thrown away. And that probably has implications for power consumption as well. 
T42 0 u_ : @Mysticial perhaps, but I'm thinking pure latency here. We can worry about power consumption when my $200 laptop stops lagging and people start writing actually efficient code. 
T42 0 u_ : There is also __builtin_expect in GCC to help the compiler. See stackoverflow.com/questions/109710/… 
T42 0 u_ : sum += ~t & data[c]; The above will be wrong since a & operation will change the bits. What you want is as below a multiplication operation: sum += (~t * data[c]); 
T42 0 u_ : I would like to know what patterns can i use to achieve this? Is there anything i could do without properly planning all the time on these small array operations so i can just write code in a fashion that suits for the computer? Is it better to sort the array all the time before an operation? I know its sort of pointless at this level but many things add up very quickly. Also does the same thing applies in other programming languages? Or is it c++ specific? 
T42 0 u_ : @Azarus I think you're among a sizable # of people who are getting confused by the sorting aspect. Sorting has nothing to do with branch prediction itself. It just happens to expose the effect of branch prediction in the specific example of this question. So don't go around blindly sorting things thinking it will magically solve everything. Not all illnesses are treated with antibiotics. You need to understand the problem first before you can apply the solution. Otherwise you may end up doing more harm than good. And before you even get to that, the rules of premature optimization still apply. 
T42 0 u_ : @mystical i am aware of that would be indeed really stupid to sort arrays all the time. The computer would run into branch prediction all the time. But my question was more about what can we use in practice to avoid or reduce its performance issues if theres any in the first place? Is there anything we can do about it? Or its not worth the effort and situations where it really matters are rare? 
T42 0 u_ : @Azarus If you're looking for a "best practice", it's in the answer already - "A general rule of thumb is to avoid data-dependent branching in critical loops." But I can't speak for whether it's worth the effort since it depends on the requirements of the application and the available resources to do it. 
T42 0 u_ : ok, I see your benchmarks, but whole branch prediction thing doesn't provide much performance. it introduces more problems than solving it. then why cpu manufactures even bothered integrating such thing in it? 
T42 0 u_ : @M.kazemAkhgary Because branch prediction helps in >95% of the cases in real life. The example in this question happens to be that remaining 5%. And even in that 5%, the penalty is minimal compared to not predicting at all and always stalling. 
T42 0 u_ : I'm afraid your proposed optimisation is flawed: int t = (data[c] - 128) >> 31; has implementation defined behavior: data[c] has int type, so data[c] - 128 will be negative for values less than 128. Right shifting a negative value has implementation defined behavior. You can fix this for 2's complement architectures with a simple expression: sum += -(data[c] >= 128) & data[c]; for which many compilers will produce code without jumps. Alternatively, given the range of data[c]: sum += -(data[c] >> 7) & data[c]; 
T42 0 u_ : @chqrlie When you get to this level of optimization, implementation-defined behavior is often an acceptable trade-off. Especially since sign-fill right-shift is essentially universal for 2's complement architectures. The real offender here is assuming a 32-bit int. It's been a while, but I probably didn't use a solution with a comparison because I had experiences with compilers generating branches for bool -> int conversions. You also can't do that in Java. Anyway, that was 5 years ago. I rarely do these hacks anymore since I prefer the SIMD intrinsic route. 
T42 0 u_ : @M.kazemAkhgary Short answer is that each core has multiple pipelines. Long answer is that it's a loaded question. Try searching for "superscalar processor". Modern processors can execute around 4 instructions/cycle. 
T42 0 u_ : On ARM, a (short) conditional is a zero-cost operation, because every instruction has a 4-bit conditional field (allowing for 16 different types of conditions on any instruction), so branching can be completely avoided in many cases. (In this case, just do the comparison, then conditionally accumulate). So on ARM, the runtime will be longer for sorted than for unsorted, because sorting requires extra work. 
T42 0 u_ : Note that this optimization is precisely the cause of Spectre and Meltdown big security vulnerabilities. In short, some operations like caching are not actually rollbacked (for performance reasons), which cause some potentially sensitive data to become readable by other processes. 
T42 0 u_ : Let me clarify one thing about your analogy with trains: train suffers by making a bad choice, because it needs to get back to the branching point on failure (I consider that it's going to be the wrong choice as you see). Does the branch prediction suffer from a bad choice compared to not making any choice and rather waiting? Or is the branch prediction in CPUs beneficial in both cases (making train analogy imprecise)? 
T42 0 u_ : @Evusas I'm not a hardware designer, so I don't know the answer for sure. But the rollback logic certainly isn't free. Even if the CPU designers managed to completely hide the performance impact of a misprediction roll-back, there are still costs in terms of power consumption of the wasted computation. Today's chips are very power optimized and will vary their clock speeds to stay under a power limit. So it's certainly within the realm of possibility that excessive waste of power from mispredictions can indirectly hurt performance. 
T42 0 u_ : @TimothéMalahieude or maybe overly optimistic guarantees of OS vendors on process isolation are the cause. Some OSes that do not use the concept of process don't care at all 
T42 0 u_ : @Mystical seems to me that the brach pridiction decreases the elapse time that the execution takes but not less CPU time/work is actually done cause the condition need to be checked either way, just there are less CPU idle times. Then one can say that if you make milion different jobs, the total time to do all of the will be similar with and without branch pridiction. so it optimizes perfomance but not throughput. is this right? 
T42 0 u_ : @naviram No it isn't. A CPU's resources can't be redistributed like that. Most of it is use it or lose it. If the CPU is stuck waiting for a branch to unwind (among many other things), its computing resources remain idle. Features like hyperthreading will allow some amount of sharing. But not to the level that you describe where everything is always utilized no matter what happens. Also, a branch misprediction involves wasted resources. So in the case you describe where throughput matters and everything can be prefectly redistributed, branch prediction would be actively harmful. 
T42 0 u_ : I haven't read every comment but while the answer's explanation is good, a simpler (and faster!) version for this specific task is sum += data[c] * (data[c] >= 128);. It is better than the posted answer even in unoptimized builds (in optimized builds, even the naive version is faster than the posted answer actually, a good reminder that micro-optimizing is bad). A comparison doesn't mean a branch. Compiler is clang 9.0. 
T42 0 u_ : @Mysticial: You might want to qualify the "avoid data-dependent branching in critical loops" a bit, given it's really only valid when the conditional block performs very little work? A little worried someone will take it literally and make some expensive statement unconditional... 
T42 0 u_ : Can the train track analogy apply to junctions in the processor's actual electrical circuits? 
T42 0 u_ : Is there a definition of a "predict friendly" code available ? Are the following statements "predict equivalent" ? Or is first statement more "predict friendly" than second ? why ? if (a && b)... if (a) if (b)... 
T42 0 u_ : after I saw this post, I am happy to have chosen to give up my financial career and become a developer in old age 
T42 0 u_ : A God among mortals 
T42 0 u_ : Congratulations for your record, +1 to keep the legend on 
T42 0 u_ : @Unheilig re: "could you tell me how you could do this int t = (data[c] - 128) >> 31; sum += ~t & data[c]; to replace the original if-condition above?". Sure. x>>31 returns 0 for all x>=0 and -1 for x<0. ~ inverts the result, so ~(x>>31) returns 1 for numbers >=128, and therefore the right hand side of the & is returned. Otherwise it returns false and returns 0. There reason >>31 detects sign is because we're dealing with 32 bit signed integers and 1 bit is reserved for sign. 
T43 0 u_ : Java does not allow us to 'emulate pass by reference'. The failure of one user to accept an answer is not a huge weakness of the entire site. 
T43 0 u_ : Explain what you mean by "java does not allow us to emulate'. As far as the weakness, it's a difference in opinion. 
T43 0 u_ : Honestly, you can simplify this answer by saying Java is pass by value only for primitive types. Everything that inherits from Object is effectively pass by reference, where the reference is the pointer you're passing. 
T43 0 u_ : @Scuba Steve if that's what you got out of my post, I have totally failed to get my message across. Everything in java is ALWAYS pass by value and NEVER pass by reference. When passing an object, you're actually passing a reference to that object, but THE REFERENCE IS BEING PASSED BY VALUE (i.e. a copy of the reference is passed.) And again, this not my personal opinion, but true by definition. 
T43 0 u_ : That's true for any reference in any language... unless you explicitly passed a reference by reference, which generally speaking, wouldn't make much sense to do. 
T44 0 u_Sanjeev : Not the case. This is true in C, Java, JavaScript, but not true in Pascal (which has &quot;Variable Parameters&quot; the same as reference parameters) and C++ (please see the example I posted)
T44 0 u_Sanjeev : Other examples of pass by reference languages are c#, php, vb.net, and fortran.
T44 0 u_Juan Mendes : I don&#39;t think C++ owns the term &quot;pass by reference&quot;. In Java, it&#39;s very common to say &quot;pass a reference&quot;, because when you pass an object, you don&#39;t copy the object, as you could in C++. it is a pointer to a location in memory, but yes a new pointer. In C++, it&#39;s a pointer to a pointer... So, I prefer to use other terms and not assume C++ is the standard everyone must follow and understand.
T44 0 u_Sanjeev : @JuanMendes,  I just used C++ as an example; I could give you examples in other languages. The term &quot;Pass by reference&quot; existed long before C++ existed. It&#39;s a textbook term with a very specific definition. And by definition, Java is not pass by reference. You can keep using the term in this way if you&#39;d like, but your usage will not be consistent with the textbook definition. It&#39;s not just a pointer to a pointer. It&#39;s a construct provided by the language to allow &quot;Pass By Reference&quot;. Please take a close look at my example, but please don&#39;t take my word for it and look it up for yourself.
T44 0 u_AutomatedMike : Describing java as &quot;pass-by-value&quot; is highly misleading.  For non-primitive types Java uses pass by value of the reference.  Pass by value implies the value is copied when passed to a method.  It is not, the reference is copied. What java does is not the same as either pass by value or pass by reference in C++.
T44 0 u_Sanjeev : @AutomatedMike, if the reference was being passed-by-reference, there wouldn&#39;t be a copy of the the reference. It would be as if the argument and parameter were two different names for the same variable. That&#39;s the distinction between pass-by-value and pass-by-reference. Please take a look at my c++ example to see what I mean. Another way to look at it is that java does not pass the &quot;Swap Test&quot;. Here is a great article which discusses exactly what I mean : <a href="https://javapapers.com/core-java/java-pass-by-value-and-pass-by-reference/" rel="nofollow noreferrer">javapapers.com/core-java/&hellip;</a>. An example Pascal would be more clear. I&#39;ll try and post one.
T44 0 u_Jędrzej Dudkiewicz : @AutomatedMike I think that describing Java as &quot;pass-by-reference&quot; is also misleading, their reference are nothing more than pointers. As Sanjeev wrote value, reference and pointer are textbook terms that have their own meaning regardless of what Java creators use.
T44 0 u_AutomatedMike : @Sanjeev that&#39;s why I said &quot;pass by value of the reference&quot; not pass-by-reference or pass-by-value, as stated many times both these terms are miss-leading when describing what java does.
T44 0 u_Sanjeev : @AutomatedMike, I understand where you&#39;re going with that. My point is that we don&#39;t need new terminology. Pass-by-value adequately describes what java does. The value of the reference is indeed passed by value in Java.
T44 0 u_Artanis Zeratul : Java is pass by reference. Or passing the value of a reference in objects. Since in Java everything is an object except for atomic types like int, char, boolean, etc. For people who always says its pass by value I think they making it more complicated rather than simplifying the matter.
T44 0 u_Sanjeev : @ArtanisZeratul the point is subtle, but not complicated. Please take a look at the cartoon I posted. I felt it was pretty simple to follow. That Java is Pass-by-value isn&#39;t just an opinion. It&#39;s true by textbook definition of pass-by-value. Also, &quot;people who always say it&#39;s pass by value&quot; include computer scientists like James Gosling, the creator of Java. Please see the quotes from his book under &quot;Edit 2&quot; in my post.
T44 0 u_newfolder : What a great answer, &quot;pass by reference&quot; does not exist in java(and other languages like JS).
T44 0 u_AndrewF : This part of the answer is misleading and should have been changed: &quot;Java is Pass-by-value, but allows us to emulate pass be reference by passing a Java reference (i.e. a pointer) by value.&quot; --  That doesn&#39;t emulate pass-by-reference at all. The closest thing to emulating it would be to pass <i>(a copy of a reference to)</i> some mutable &quot;holder&quot; object, e.g., an <code>AtomicReference</code>, and the called function would mutate the &quot;holder&quot; to hold a new value. The caller would need to understand that usage; the language would not help.
T44 0 u_Sanjeev : @AndrewF. Yes, in a sense, you could emulate pass-by-reference even more closes by enclosing the &quot;reference&quot; in a mutable object since this would allow changing the &quot;reference&quot; in the function. But my goal was to explain the origins of passing &quot;reference&quot; or a pointer by value. How closely this emulates PBR is not relevant to my argument.
T44 0 u_AndrewF : I think most of the comments/answers on this question (and this answer itself) have covered well that passing a reference/pointer value is not pass-by-reference by definition and does not exhibit the bidirectional behavior of pass-by-reference. So there is no emulation whatsoever. The rest of the answer gets it right, but that one sentence gets it wrong.
T44 0 u_Sanjeev : @AndrewF, I&#39;m still not TOTALLY convinced this section is incorrect or misleading, but I&#39;m open to the idea that you might have a point and I&#39;m just missing it, especially since you&#39;re the second person to object. Either way, you&#39;ve convicted me to change it (the first chance I get) because even if that one bullet is historically correct, it&#39;s a distraction from my core message. Thanks for the feedback.
T46 0 u_Bhanu Sharma : i found filenotfound exception while i try to read  file name with &quot;До_свидания&quot; file name(Russian language) i try with FileInputstream but it not cable to read this filename from sdcard.
T46 0 u_Chris.Zou : For android developers, seems like android does not come with IOUtils from Apache. So you might consider referring to other answers.
T46 0 u_James : I work in a limited footprint environment, so the solution by @PavelRepin below using the java io/util libs makes more sense.
T46 0 u_Esben Skov Pedersen : @ChristofferHammarstr&#246;m totally agree. Even on the same machine if you run java from cmd or from your IDE.
T46 0 u_Donal Fellows : <code>IOUtils.toString()</code> works very nicely with the Java7 try-with-resources.
T45 0 u_ : maven dependency for commons-io <dependency><groupId>commons-io</groupId><artifactId>commons-io</artifactId><version>2.4</version> </dependency> 
T46 0 u_AutonomousApps : For gradle users: <code>compile &#39;org.apache.commons:commons-io:1.3.2&#39;</code> (I&#39;m having trouble finding the latest version; anyone?)
T45 0 u_ : It' s a worse idea to use 3rd library to load inputstream to string. Try this gist.github.com/XinyueZ/440e015b3a1afb692812 
T45 0 u_ : Guava version: CharStreams.toString(new InputStreamReader(stream)) 
T46 0 u_Shadoninja : This is an incredibly old question at this point (it was asked in 2008). It is worth your time to read through more modern answers. Some use native calls from the Java 8 library.
T46 0 u_codepleb : This answer is heavily outdated and one should be able to mark it as such (sadly this is not possible atm).
T46 0 u_Ilya Gazman : It turns out that this method is the slowest!  Check out my benchmarks <a href="https://stackoverflow.com/a/48775964/1129332">here</a>
T46 0 u_Steve Chambers : In case it helps anyone I&#39;ve filled in the small gap in the second part of this answer on how to close the stream in <a href="https://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string/34451847#34451847">this answer</a>.
T46 0 u_Roshan : IOUtils.toString() has long been deprecated. This answer definitely is not the recommended way any more.
T45 0 u_Jean-Fran&#231;ois Fabre : then <a href="https://stackoverflow.com/posts/309448/edit">edit</a> it to explain why it is deprecated to help future readers.
T45 0 u_ : Check out this handy example of IOUtils.copy: apisonar.com/java-examples/… 
T48 0 u_MetroidFan2002 : I disagree with your statements for the DO_NOTHING action.  If the find action method cannot find an action, then returning null is the right thing to do.  You&#39;ve &quot;found&quot; an action in your code which isn&#39;t really found, which violates the principle of the method, to find a useable action.
T48 0 u_Laplie Anderson : I agree that null is overused in Java, especially with lists.  So many apis would be better if they return an empty list/array/collection instead of null.  Many times, null is used where an exception should be thrown instead.  An exception should be thrown if the parser can&#39;t parse.
T48 0 u_Thorbj&#248;rn Ravn Andersen : I think it should be possible in the source code to specify that null is never returned from method X and that a given parameter should NOT be null and it is an error to pass one.
T48 0 u_Steven Evers : The latter example here is, IIRC, the Null Object design pattern.
T48 0 u_DragonBorn : Assertion is good for TESTING. It&#39;s dangerous to use on PROD.
T48 0 u_Cshah : I disagree with DO_NOTHING because although it eliminates that null check, the resultant behaviour is unexpected. If null is an unexpected input to your method then it is pertinent that your method throws NPE so that the caller is aware and things are logged(A fail fast behaviour). With using DO_NOTHING, its like everything passed but the resultant action didnt take place and users will redo the action (resubmitting the form). I agree to return empty lists, objects but not nulls as return values but dont agree to the DO_NOTHING illustrated above. But NPE&#39;s shouldnt display stacktrace on UI
T48 0 u_Kevin Brock : @Cshah (and MetroidFan2002). Simple, put that into the contract and then it is clear that a non-found returned action will do nothing. If this is important information to the caller, then provide a way to discover that it was a non-found action (i.e. provide a method to check if the result was the DO_NOTHING object). Alternatively, if action should normally be found then you still should not return null but instead throw an exception specifically indicating that condition - this still results in better code. If desired, provide a separate method returning boolean to check if action exists.
T48 0 u_Berlin Brown : I am defensive in my coding and do the null checks.  Especially in a J2EE environment.  My thinking is that anything that can be null...could potentially be null at some point.  Contractually, in most cases I don&#39;t want to throw an illegalarg exception or nullpointer because Java shouldn&#39;t have null refs in the first place.  In most cases, I try to find a default return value and fail fast with the default value/expected return value.
T48 0 u_gshauger : Concise does not equal quality code.  I&#39;m sorry you think so.  Your code hides situations where an error would be advantageous.
T48 0 u_Thorbj&#248;rn Ravn Andersen : @MetroidFan, if you return a valid Action which doesn&#39;t do anything you have a simpler caller without a branch.  Branches cause additional complexity, and keeping them as few as possible makes for simpler testing.
T48 0 u_MetroidFan2002 : @Thorbj&#248;rn Ravn Andersen By hiding the possibility that the findAction method may <i>not</i> find an action, you&#39;ve now done logic that, while it doesn&#39;t break the program, may result in undesired effects that aren&#39;t found until a much later stage (possibly in production).  Depending on if findAction really can be expected to not find anything, this is highly undesireable - returning null or throwing an exception, like imaginaryboy suggests, are better approaches so that they can be explicitly checked for and paths taken to account for the lack of finding an action.
T48 0 u_monksy : Whats the point of using assertions when they only fail for you? Yes you can catch stuff while you&#39;re working on it, but in production how will they help if you never hear about that in odd situations?
T48 0 u_DarthVader : There is nothing wrong with checking null values, and I have seen lot of senior/rockstar developers who check for null values everywhere. Also, null checking is one of the cheapest operation in a programming language.
T48 0 u_Eelco : Agreed with DarthVader. I&#39;d argue that not being defensive enough is the junior thing to do. There are very few libraries out there, and very few coders in my experience that have the discipline to completely describe their contracts (and that includes whether nulls might be returned/ are acceptable values for arguments), so often there isn&#39;t much to trust.
T48 0 u_Sal : @Saj: Why Assertions are only good for testing and dangerous for productive systems? If there is a condition that leads to an error it has to fail also in production. Nevertheless it&#39;s important to have some JUnit test or integration test that checks that assertion.  Furthermore enable assertions with &quot;-ea&quot;
T48 0 u_Sebastian : In the &quot;compare&quot; code your perspective is being unveiled for the fact that if you have nothing to do when <code>NULL</code> is returned for <code>action</code> then why checking for <code>NULL</code>? You make the code looks uglier than just a checking for a non <code>NULL</code> value. Avoiding coding styles, I prefer the way I&#39;ve seen in some android api code while asking for <code>NULL</code>. They just return if the involved method can&#39;t continue working even thought method profile returns void. And if you have to, arrange things previous the return statement. Of course, you are returning and breaking the normal flow of a high level language.
T48 0 u_ianpojman : assert is unusable for me, because it has to be explicitly enabled - I want my assertions to always be enabled. Someone said: &quot;but in production how will they help if you never hear about that in odd situations?&quot; Easy - you get an exact and crystal clear failure as near to the root cause of the problem as possible, and can easily patch it with much less effort than reverse engineering the entire system trying to figure out where the failure was. That is why design by contract, fail-fast, no-null design is the only way to go.... and never use &#39;assert&#39;, use a mechanism that is always enabled....
T48 0 u_Matthew Kirkley : Instead of the  DO_NOTHING action I would probably create a hasAction(userInput) method, returning a true or false if there is a valid action for that userInput.  Then findAction would return the action or throw an Exception ActionNotFoundException
T48 0 u_FidEliO : &quot;although my testing has shown next to no performance impact from assertions&quot;. Your assumption is not based on Oracle documentation. It can highly affect performance in type of system that includes real-time computation.
T48 0 u_Jonathan : I agree with  MetroidFan2002. he is spot on. returning null can sometimes happen and it is not dirty at all to check for nulls. by all means if you can avoid nulls and always initialise your contracts then you wont need to check nulls
T47 0 u_ : @SnOrfus +1 for mentioning the Null Object design pattern. I learned something here. See en.wikipedia.org/wiki/Null_Object_pattern 
T48 0 u_Anders Lind&#233;n : I never return null so I never check return values for null. I never need to think about which variables that are valid. They all are. I never pass null to a method so I never need any input validation in my methods. If it would feel logical to actually have a method that allows a null parameter to be passed, I create two methods instead. Minimizing code duplication by breaking out commons is then important.
T48 0 u_user1050755 : I&#39;m against code bloat and agree with this solution. Explicitly checking for NULLs is an anti-pattern IMHO. The Java way is to throw *NotFound/InvalidAccess etc. exceptions which avoids the necessity for the caller to explicitly handle irregular situations. I even go further: use arg.equals(&quot;foo&quot;) instead of &quot;foo&quot;.equals(arg), or use native types (long instead of Long) to implicitly FORCE NPE. Fortunately, when returning a null object, the caller can still try to call a method on that null value and force a NPE. :-)))))
T48 0 u_Ryan Bennetts : Often, the behaviour you want to implement if an object is null will be similar no matter where you receive the null object. As others have noted, the answer&#39;s DO_NOTHING action is, in fact, The Null Object Pattern (<a href="http://en.wikipedia.org/wiki/Null_Object_pattern" rel="nofollow noreferrer">en.wikipedia.org/wiki/Null_Object_pattern</a>) which collects this &#39;what do we do if it&#39;s null?&#39; logic in one place and so reduces duplication. However, the Null Object Pattern is really just a more limited version of Martin Fowler&#39;s Special Case Pattern: (<a href="http://martinfowler.com/eaaCatalog/specialCase.html" rel="nofollow noreferrer">martinfowler.com/eaaCatalog/specialCase.html</a>) which is great for eliminating checks for values other than null too.
T48 0 u_Ricky Clarkson : I&#39;d go for Optional/Option or an exception here.  Returning null is just poison for your caller; they&#39;ll forget to handle it and see a problem far away from the call site.
T48 0 u_Travis Wilson : @MetroidFan2002: agreed re: DO_NOTHING, but not quite.  If the find action method cannot find an action, then the method didn&#39;t do what it said it would do. In that case it should not return. It should throw.
T48 0 u_MetroidFan2002 : @TravisWilson If the method was going to throw something, it should throw IllegalArgumentException, not NPE, because it&#39;s explicitly checking for null and doing something with it.  IAE would also handle getting non-null input and not being able to find anything for it as well.  But, nowadays with Java 5+, I would throw NPE IFF the method took an enum constant as a parameter, since you&#39;d have something (one for each enum constant) or nothing if proper practices with enums were observed.
T48 0 u_MetroidFan2002 : @user1050755 What you are doing with strings is both dangerous and naive.  When you do checking against a literal, you want to know if that literal matches, not if the string is null.  The naive way to do that is as you&#39;ve suggested, with a useless null check: if(stringVar != null &amp;&amp; stringVar.equals(&quot;literal&quot;))  But, this forces you to directly send in null input for testing coverage, resulting in unneeded branches.  &quot;&quot;.equals(stringVar) will always work regardless.  If you know the literal to check on, you should always do this - it&#39;s the safest, easy to read and doesn&#39;t do extra conditions.
T48 0 u_grinch : I don&#39;t get why everyone is hating the DO_NOTHING. Sure, in this example it is minimalistic - but this is a programming language... add in an &quot;isEmptyAction()&quot; method to the class... the point is to ENCODE the state of the objects, not return some cryptic-lack-of-a-value that you somehow have to just know to check for... &quot;isEmptyAction()&quot; is an actual API that encodes the fact that an action might be empty/do nothing. Much much much cleaner, imo (and many others, hence the fact that it is it&#39;s own defined design pattern ...)
T48 0 u_Travis Wilson : @MetroidFan2002: absolutely. NPE is not usually the right thing to throw. Not finding a method is a totally legitimate outcome so it should be something specific that the consumer is required to catch. Maybe it&#39;s a result of bad input, in which case I like IllegalArgumentException (but am not thrilled that it&#39;s a RuntimeException). Also by this rule: if the method says it might return an action that does nothing (say, for consumer&#39;s convenience), then returning DO_NOTHING is fine.
T48 0 u_dfeuer : Throwing NPE is a very sensible thing to throw when something is null <i>that shouldn&#39;t be</i>. By the way, you should be careful if you&#39;re dealing with concurrency, because something that&#39;s not null when you check it might be null when you use it.
T48 0 u_UFL1138 : I just added the final two suggestions to the answer -- the try/catch and the more-meaningful default action.  @dfeuer I don&#39;t think NPE makes sense unless &#39;someInput&#39; is null.  I agree with Travis Wilson that IllegalArgumentException also is not ideal, although it&#39;s not inappropriate.  My suggestion is a custom exception with a meaningful message that can be shown to the user that supplied the bad input.
T48 0 u_Ziggy : @MetroidFan2002 late to the fray. The point with the null object pattern is that you <i>are</i> returning null. The user can still check for a null object, by comparing it with the null object. She can also ignore the fact that she got back a null: that&#39;s the advantage. If you implement a method, and you think null is an OK value to return, then the thing you returned (the null) should still obey the API of the thing you promised to return. If it&#39;s unacceptable, then you should have thrown instead. The user can still decide for herself, by checking for the null object and throwing.
T48 0 u_MetroidFan2002 : @Ziggy It&#39;s not that I disagree with the null object pattern, and I use it all the time.  It&#39;s that in this particular case, the method signature is <i>findAction</i>  A DO_NOTHING action, by definition, is NOT FOUND!  That&#39;s lying to your user.  And having the user have to check for DO_NOTHING violates polymorphism - now not <i>all</i> your instances can be used interchangeably.  To put it in perspective, let&#39;s say the method was BigDecimal findBigDecimal(String whatever) - The Null Object pattern does <i>not</i> work here.  Finding something lies to you if zero is returned.
T48 0 u_artbristol : Null Object pattern is more useful than <code>null</code> because sometimes the result isn&#39;t used immediately - it could be stored in a field, for example. You can then distinguish between <code>null</code> caused by an uninitialized field (probably a programming error), vs null as a result of some action.
T48 0 u_Dilruk : CAUTION: Assertions can be disabled and are found to be disabled in production environments.
T48 0 u_Kemal Erdogan : null object pattern is useful for only simple cases because of java&#39;s lack of multiple inheritance. Unfortunately, null is the only value that can stand for an arbitrary object and that is why it is used so widely.
T48 0 u_Xunnamius : I find myself using the Null Object DP when having the API &quot;always available&quot; is relevant (such as with the Strategy pattern), but I typically find myself simply throwing verbose and meaningful exceptions. I can&#39;t remember the last time I explicitly checked for null in Java (or any real OO language); then again, I don&#39;t code in Java all that often.  I just want to say: this was an epic conversation and a very enlightening read. This is why I come to SO. Thank you all for participating in this.
T48 0 u_sprinter : There is a much better solution for this now in Java8: use an Optional as your return value to represent a nullable value. That way the caller knows that it is an optional value and can use all the methods that Optional provides for handling the value.
T48 0 u_John Mercier : I like the idea of a DO_NOTHING action but nobody seems to mention throwing an IllegalArgumentException. If the argument is invalid this seems like a good response. The method will need to have proper documentation either way. Also @sprinter returning a DO_NOTHING action is very similar to Optional. Both have the goal of not returning null. I&#39;m not convinced that Optional is &quot;a much better solution&quot; though.
T48 0 u_Kevin Krumwiede : By and large, the problem is not that developers don&#39;t know or trust the contracts; the problem is that there <i>are</i> no contracts.  In my experience with the Android SDKs published by several hardware vendors, there is either no documentation or no useful documentation.  The code mills in Hong Kong and Bangalore have never even heard of Javadoc.
T48 0 u_Josh : As an electronic eng. turned into a programmer, this topics spin my head as I try to learn more XD
T48 0 u_Demonblack : throwing an Error just because someone passed a null file path to your file opener thingy is extremely overkill. Imagine if someone used that inside an application server.
T48 0 u_Mike : The real question is WHEN null is valid response and when is not. And what would be that very contract for software to be least cluttered with boilerplate code.
T48 0 u_Pascal Schneider : Since Java 8, I always use Optional for cases like this. From the point of readybility it&#39;s not a big difference IMO, but it looks a bit more aesthetic. So instead of <code>if (obj != null)</code> I write <code>if (objOpt.isPresent())</code>
T47 0 u_ : @MetroidFan2002 Added to your statement - Criticism of NullObjectPattern 
T48 0 u_Osmar : I&#39;ve seen too many dumb NullPointer exceptions in Production as to think that defensively checking for nulls is a &quot;Junior to Intermediate developers problem&quot;   In my opinion, always, always do Null checking
T48 0 u_Singed : @MetroidFan2002  &quot;If the find action method cannot find an action, then returning null is the right thing to do&quot; This is totally up to the designer of the program to decide whether an action that doesn&#39;t do anything fits his use case. it is totally valid to return an action that doesn&#39;t do anything if it fits your design. You imply that real/fake action differentiation is important to the caller, but both approaches are valid according to your use case.  The case where not found action is important to the caller is also legit, but can be communicated through other means than returning null
T48 0 u_JFreeman : As a person new to java i find it interesting that people would find it useful to do this. Why would a programmer not always instead write a <code>try</code>/<code>catch</code> statement and use that to avoid and resolve errors?
T48 0 u_Rasmus Kaj : The second half of this example basically says do not use Java.  While that might be a good idea, sometimes you don&#39;t have a choise.  And in java, null is a valid value.
T48 0 u_bltxd : A find method opens up the possibility that it didn&#39;t find what we were looking for. A habit that works well for me is to use 2 distinct verbs for functions which can obviously fail: findXXX may fail and as such may return null or better an option, getXXX may only fail by throwing an exception. I&#39;ve also seen variants such as find vs find_exn or find vs find_opt. One way or the other, as long as the usage is regular this is fine.
T47 0 u_Demonblack : The NOP approach is almost never a good one, in my opinion. Like others have said, it may hide deeper flaws in your program so that they only get found in production after weeks of troubleshooting. That&#39;s not always the case, obviously, but I would be extremely wary of using it. The rigorous and arguably correct answer to &quot;find me X&quot; when you don&#39;t find it is to return null if you expect it to possibly not be found, or throw an exception if it&#39;s not an expected outcome. (e.g. I would expect a findByName method to be able to return null, but a getById never should.)
T47 0 u_ch271828n : How about using the <code>Optional&lt;T&gt;</code>?
T47 0 u_Joffrey : How about using Kotlin?
T49 0 u_Rok Strniša : If you want to make a HashMap thread-safe, use <code>Collections.synchronizedMap()</code>.
T49 0 u_erickson : I would also comment that the naive approach to thread-safety in <code>Hashtable</code> (&quot;synchronizing every method should take care of any concurrency problems!&quot;) makes it very much <i>worse</i> for threaded applications. You&#39;re better off externally synchronizing a <code>HashMap</code> (and thinking about the consequences), or using a <code>ConcurrentMap</code> implementation (and exploiting its extended API for concurrency). Bottom line: the only reason to use <code>Hashtable</code> is when a legacy API (from ca. 1996) requires it.
T49 0 u_Gaurava Agarwal : HashMap gives flexibility to programmer to write threadSafe code when they actually use it. It happened rarely that I needed a thread safe collection like ConcurrentHashMap or HashTable. What I needed is certain set of functions or certain statements in a synchronized block to be threadsafe.
T49 0 u_Maneesh Kumar : Hashtable is obsolete and we are using HashMap for non thread safe environment.  If you need thread safety then you can use Collections.synchronizedMap()  or use ConcurrentHashMap which is more efficient that hashtable.
T49 0 u_Jilles van Gurp : It&#39;s obsolete but not deprecated and I&#39;m wondering why this is. I&#39;m guessing removing this class (and Vector for the same reasons) would break too much existing code and annotating with @Deprecated would imply an intention to remove the code, which apparently is not there.
T50 0 u_rashid : You can also use ConcurrentSkipListMap (<a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/ConcurrentSkipListMap.html" rel="nofollow noreferrer">docs.oracle.com/javase/10/docs/api/java/util/concurrent/&hellip;</a>). It is thread-safe collection similar to ConcurrentHashMap and this map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time.
T52 0 u_tedders : Theory: Goats are found in all kinds of precarious places, like sheer cliffs, possibly bucking location trends they get from regular non-goat users. Might explain &quot;teleportations&quot;, which could be goats appearing to wildly relocate as the software tries to determine their location with algos designed for non-goats.
T51 0 u_LarsH : How does this answer add anything to the info that the question already showed?
T52 0 u_djechlin : @LarsH - the source for one.
T51 0 u_casperOne : This is a history lesson, not an answer.  Even if it is an Easter egg, is there a valid use case for it?  Being an Easter egg doesn&#39;t preclude it from being useful, and you&#39;ve not shown whether it is or is not useful.
T51 0 u_LarsH : @djechlin, one aspect of the source is informative, and now that the answer has been edited, it&#39;s far more obvious: (this implementation of) this method always returns false.
T52 0 u_Thorbj&#248;rn Ravn Andersen : The method could be overridden in a test scenario.
T52 0 u_ : It's also a reference to en.wikipedia.org/wiki/The_Men_Who_Stare_at_Goats , about a U.S. military project involving goats. 
T51 0 u_logain : The monkey function is to detect the MonkeyRunner debug tool as specified in another answer.
T52 0 u_ : They need to add canPigsFly(). while (!canPigsFly()) { /* code */ } 
T52 0 u_ : That's a real app. 
T52 0 u_Martin Konecny : I feel bad for anyone who cheekily used this function, expecting it to return <code>false</code> forever.
T51 0 u_Ced : @casperOne given the content of the method I think the use case is pretty self explanatory.
T52 0 u_ : What's funny is there's an app with that ID: play.google.com/store/apps/…. And it's not free, nor made by Google! 
T52 0 u_user253751 : @raulk Yes, they used the ID of that app, they didn&#39;t pick a random app ID and then happen to have someone create an app with that ID...
T52 0 u_ : App is available for free through Amazon app store amazon.com/Coffee-Stain-Studios-Goat-Simulator/dp/B013KNQ2MS 
T54 0 u_djechlin : My bad - those are warnings, however they often lead to actual compile errors if you are returning from a block that control flow is now forced down.
T53 0 u_Andy : Wouldn&#39;t compiler directive be a better use for conditions you want to compile out?
T54 0 u_josefx : @djechlin I do not know if this is android only, in standard java ` if(false){...}` compiles just fine (open jdk javac 1.6 and 1.7)
T53 0 u_djechlin : @josefx - compiler warnings and can lead to errors if the branch the code is forced down has a <code>return</code> statement as this produces unreachable code.  This is a useful compiler error; e.g. if you forget <code>break;</code> statements in a switch and your <code>default</code> case throws an exception, you will get this error.
T54 0 u_josefx : @djechlin sorry, I somehow failed to read your first sentence after seeing your (1==2) example - that if(false) is handled by the compiler is a downside in this case (and I should get some sleep to avoid more of these mistakes :-)).
T54 0 u_djechlin : @PeterOlson - if you are specifically trying to test a code branch where an if goes false or true, this is the most precise and obvious way to simulate that - commenting out the block could be less accurate if you don&#39;t match to the proper end of the block (perhaps you didn&#39;t notice a discreet if/else block immediately following), it will lead to a compile error if you&#39;re forcing to the following <code>else</code> block, etc.
T54 0 u_ : For "if (false)", check end of doc docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.21 
T54 0 u_Mike : It is legal because a sub-class could override isUserAGoat() and return a different value.
T53 0 u_djechlin : @Vadzim nope, compiler will detect that always evaluates to true.
T54 0 u_njzk2 : possibly because <code>isUserAGoat</code> is not final.
T54 0 u_Mark Whitaker : <b>&quot;provided the implementation doesn&#39;t change&quot;</b> - and there&#39;s the problem. This is a disastrous way to implement a warning-free &quot;if (false)&quot; because the implementation can and does change. See my answer to this question: as of API21 <code>isUserAGoat()</code> returns true if a user has a specific app installed. Good luck diagnosing that when your code suddenly starts behaving oddly on &quot;random&quot; devices!
T54 0 u_thedayturns : @MarkWhitaker Or if goats start using devices.
T54 0 u_Szymon Drosdzol : @thedayturns If goats start using Android devices this will be the least of our problems.
T53 0 u_user253751 : @djechlin No it isn&#39;t, did you actually try it?
T54 0 u_djechlin : @immibis what&#39;s that referring to?
T54 0 u_ : @djechlin if(false) {/* stuff */} not compiling. 
T54 0 u_djechlin : @immibis guess you&#39;re right. Certainly gives this answer a long run of misinformation (and I had at least one chance to read a JLS citation and realize this). It&#39;s <i>maybe</i> material enough to keep around if the &quot;Eclipse warning/error&quot; happens but I will have trouble checking given my lack of Eclipse environment. At the least, I brought it up to being technically factual.
T54 0 u_ : @djechlin could you please remove the aforementioned misleading comment (stackoverflow.com/questions/13375357/…) - a lot of people his this answer, and, since newbies usually believe highly-upvoted things, we're actually educating newcomers that if(false){} is a compiler error in Java... 
T53 0 u_BlueWizard : have you tried using /* and */ for commenting out code?
T54 0 u_djechlin : @JonasDralle this is obviously a ridiculous answer, but that won&#39;t work for code that already has /* */ inside of it. It&#39;s also easy to mess up blocks that way if if ends in } } } } } } } }.
T55 0 u_bad_keypoints : So <code>i+=j</code> compiles as I checked myself, but it would result in loss of precision right? If that&#39;s the case, why doesn&#39;t it allow it to happen in i=i+j also? Why bug us there?
T55 0 u_Lukas Eder : @ronnieaka: I&#39;m guessing that the language designers felt that in one case (<code>i += j</code>), it is safer to assume that the loss of precision is desired as opposed to the other case (<code>i = i + j</code>)
T56 0 u_bad_keypoints : No, its right there, infront of me! Sorry i didn&#39;t notice it earlier.  As in your answer, <code>E1 op= E2 is equivalent to E1 = (T)((E1) op (E2))</code>, so that&#39;s kind of like implicit down typecasting (down from long to int). Whereas in i = i+j, we have to do it explicitly, ie, provide the <code>(T)</code> part in <code>E1 = ((E1) op (E2))</code> Isn&#39;t it?
T55 0 u_nanofarad : I&#39;d assume that this is used to avoid an explicit cast and/or <code>f</code> postfix in the situation of adding a double literal to a short?
T56 0 u_Hans : So is E1 op1 op2 op3 = E2 valid and equivalent to E1 = T(E1 op3 (E1 op2 (E1 op1 E2)))?
T56 0 u_Lukas Eder : @Hans: You can&#39;t have several &quot;ops&quot; to the left of an assignment operator... I&#39;m sure this is covered elsewhere in the JLS
T56 0 u_ThePyroEagle : A likely reason to why the Java compiler adds a typecast is because if you&#39;re trying to perform arithmetic on incompatible types, there is no way of performing a typecast of the result using the contracted form. A typecast of the result is generally more accurate than a typecast of the problematic argument. No typecast would make the contraction useless when using incompatible types, as it would always cause the compiler to throw an error out.
T56 0 u_pyb : Why is 3 + 4.6 rounded to 7, not 8?
T55 0 u_Lukas Eder : It&#39;s not rounded. It&#39;s cast (= truncated)
T56 0 u_Stefan Neuhaus : The <i>Puzzle 9</i> in the book &quot;<i>Java Puzzlers</i>&quot; (Joshua Bloch, Neal Gafter) covers exactly this issue. In the solution the authors highlight 2 phrases: &quot;<i>Compound assignment expressions automatically cast the result of the computation they perform to the type of the variable on their left-hand side.</i>&quot; --- &quot;<i>Do not use compound assignment operators on variables of type <code>byte</code>, <code>short</code>, or <code>char</code>.</i>&quot;
T56 0 u_Nikos : Does this issue persist in Java today (Java 8, or 9)?
T55 0 u_Lukas Eder : @RestlessC0bra: I really really really hope that the JLS won&#39;t break incompatibly on that level :), so without trying (you could try this yourself), I&#39;ll say yes, the &quot;issue&quot; persists
T57 0 u_Bill the Lizard : That will be backed by the original input array, which is why you (probably) want to wrap it in a new ArrayList.
T57 0 u_Mikezx6r : Be careful with this solution. If you look, Arrays ISN&#39;T returning a true java.util.ArrayList. It&#39;s returning an inner class that implements the required methods, but you cannot change the memebers in the list. It&#39;s merely a wrapper around an array.
T58 0 u_monksy : You can cast the List&lt;Element&gt; item to an ArrayList&lt;Element&gt;
T57 0 u_user85421 : @Mikezx6r: little <b>correction</b>: it&#39;s a fixed-size list. You can change the elements of the list (<code>set</code> method), you cannot change the size of the list (not <code>add</code> or <code>remove</code> elements)!
T57 0 u_PaulMurrayCbr : Yes, with the caveat that it depends on what you want to do with the list. It&#39;s worth notng that if the OP simply wants to iterate through the elements, the array doesn&#39;t have to be converted at all.
T57 0 u_glglgl : @monksy No, you can&#39;t. As was said, it is a different kind of <code>ArrayList</code>.
T58 0 u_Jingguo Yao : This does not work if array element is of primitive type in Java 8. For details, see <a href="http://stackoverflow.com/q/2607289/431698">stackoverflow.com/q/2607289/431698</a>
T59 0 u_Daniel : For calls where <code>max</code> value is <code>Integer.MAX_VALUE</code> it is possible to overflow ,resulting into a <code>java.lang.IllegalArgumentException</code>. You can try with : <code>randInt(0, Integer.MAX_VALUE)</code>. Also, if <code>nextInt((max-min) + 1)</code> returns the most high value (quite rare, I assume) won&#39;t it overflow again( supposing min and max are high enough values)? How to deal with this kind of situations?
T60 0 u_Moishe Lipsker : @momo the <code>RANDOM</code> class supports <code>nextLong</code>. You could use that instead of <code>nextInt</code> for longs.
T59 0 u_mmm : @MoisheLipsker It must be that nextLong doesn&#39;t take a bound as nextInteger
T60 0 u_b1nary.atr0phy : @momo Enlist help from the <code>double</code>. Just so: <code>long val = ((long) (r.nextDouble() * (max - min))) + min</code>
T60 0 u_mmm : Yes, I already do that, using the Math.random() which does that: public static long random(long min, long max) {                 return min + Math.round( Math.random() * ( (max - min) ) );         }
T60 0 u_leventov : This snippet (that probably thousands of people copy) is BAD. It produce garbage. Just <code>ThreadLocalRandom.current().nextInt(min, max)</code>.
T60 0 u_Greg Case : @leventov <code>ThreadLocalRandom</code> was added to Java 2 1/2 years after this question was first asked.  I&#39;ve always been of the firm opinion that management of the Random instance is outside the scope of the question.
T60 0 u_Greg Case : @AbhishekSingh The comments try to address this, but in more detail: nextInt(N) returns a number from 0 to N - 1, i.e. it will never return N as a result.  In this case we want to include N in our possible range of values, so we add one:  nextInt(N+1) =&gt; returns a number in the range 0 to N, inclusive of both 0 and N
T59 0 u_Webserveis : In Android Random rand = new Random();
T59 0 u_Greg Case : @Webserveis This is addressed in the comments in the example.  Short version - you should not = new Random() for every call to the function, or your results will not be sufficiently random for many cases.
T60 0 u_Chit Khine : Shouldn&#39;t you initialize the rand = new Random()?
T59 0 u_Greg Case : @ChitKhine Not on each call to the function.  The RNG algorithm under the hood of Random works well (enough for non-cryptographic applications) when generating successive random numbers.  However, if the Random instance is re-created on each call, that means that instead of a proper RNG you&#39;re going to get &quot;random&quot; numbers based on whatever seed is chosen each time - often this is based on the system clock.  This can give decidedly non-random results.  Instead, you should consider instantiating your Random instance outside of method scope.  The example code attempts to address this.
T60 0 u_ : Use ThreadLocalRandom.current().nextBytes(chunk); if you want to save yourself the new Random(). Thanks to a really popular question on generating random Integers in Java. 
T60 0 u_Aman : and if you&#39;re using for android java ThreadLocalRandom.current().nextInt(1, 100) it requires min API Level 21
T60 0 u_JustAnotherGuy : Do these methods return integers, or real numbers. In other words, what method should be called if my bounds were 1.33 &lt; x &lt; 4?
T60 0 u_Greg Case : @JustAnotherGuy The examples in this answer strictly deal with integers.  For the real numbers case, a variant on the technique described in <a href="https://stackoverflow.com/a/363732/462">stackoverflow.com/a/363732/462</a> should work.  Recommend not using Math.random() but instead an appropriate double-based method of ThreadLocalRandom or Random instead.
T60 0 u_ : Maybe these examples can help even more: apisonar.com/java-examples/… 
T61 0 u_Joachim Sauer : I&#39;d replace &quot;completely useless&quot; with &quot;just a minor security improvement&quot;. For example you could get access to a memory dump if you happen to have read access to a tmp directory, a badly configured machine and a crash in your application. In that case you wouldn&#39;t be able to install a keylogger, but you <i>could</i> analyze the core dump.
T61 0 u_Dan Is Fiddling By Firelight : Wiping unencrypted data from memory as soon as you&#39;re done with it is considered a best practice not because it&#39;s foolproof (it&#39;s not); but because it reduces your threat exposure level.  Real time attacks aren&#39;t prevented by doing this; but because it serves a a damage mitigation tool by significantly reduces the amount of data that is exposed in a retroactive attack on a memory snapshot (eg a copy of your apps memory that was written to a swap file, or that was read out of memory yanked from a running server and moved to a different one before its state failed).
T62 0 u_kingdango : I tend to agree with the attitude of this response. I&#39;d venture to propose most security breaches of consequence occur at a much higher level of abstraction than the bits in memory.  Sure, there are probably scenarios in hyper-secure defense systems where this may be of considerable concern but seriously thinking at this level is overkill for 99% of the applications where .NET or Java are being leveraged (as it related to garbage collection).
T62 0 u_Rolf Rander : maybe localhost isn&#39;t what you want to protect.  Maybe you have created a program running on an unsecure client and you need the password for accessing a database.  If you don&#39;t trust the client and are trying to protect the database, wiping passwords from memory is good advice.
T62 0 u_josefx : @RolfRander that is even worse, you should not enter passwords on an untrusted client - use a one time key (not sure this is the right term, a password that only works once and gets locked out after that use).
T62 0 u_Rolf Rander : most websites use passwords for login.  Your credit card number and security-digits is also a kind of password.
T62 0 u_josefx : @RolfRander there is nothing about websites that requires an untrusted client, if the user chooses to use a compromised system then there is nothing that you can do to protect him from the consequences.
T62 0 u_Rolf Rander : as I said, the point might be protecting the server, not the client. My point with the website-example is that there are lots of services using passwords (for different reasons, although other mechanisms obviously would be more secure.  Bottom line being that a scenario where you want to protect the server, won&#39;t trust the client and are using passwords, storing passwords in a char[] is a wise choice and this isn&#39;t really a far-fetched scenario.
T62 0 u_josefx : @RolfRander somehow I get the feeling that you use a single login for all your clients and don&#39;t have any security/validation serverside. Its your duty to make sure that a user can&#39;t compromise the database (access restrictions and validation serverside) and the users duty to make sure that his account can&#39;t be compromised (his password).
T62 0 u_Rolf Rander : Absolutely. But for the user to make sure his password isn&#39;t compromised, the software handling the password has to take care to reduce the chance that malware (on the client) can pick up passwords from the client application memory.  To achieve that, I believe storing the password in a char[] and overwriting this afterwards is good advice.
T62 0 u_Tinman : I&#39;d say that of someone understands the thinking behind the char vs sting then they are more likely to be thinking of security when configuring the servers. Not thinking is what usually introduces security holes.
T62 0 u_Peter vdL : After the Heartbleed penetration of server memory, revealing passwords, I would replace the string &quot;just a minor security improvement&quot; with &quot;absolutely essential to not use String for passwords, but use a char [] instead.&quot;
T61 0 u_josefx : @PetervdL heartbleed happened because someone got the great idea that reusing memory was cheaper than allocating new (cleared) memory, you cannot reuse a String in Java, just hope that nobody ever gets the idea to put your char[] into a reuse list for better performance.
T62 0 u_Peter vdL : You&#39;re missing the point completely, Josefx.  The point is that heartbleed allowed remote reading of process memory, which everyone had hitherto thought very unlikely.  When combined with the use of Java strings, passwords are easily revealed.  Char [] allows the developer to blank out passwords, String does not even give that opportunity.  Char [] + heartbleed may be harmful if coder screws up.  String + heartbleed == definitely always harmful.
T62 0 u_josefx : @PetervdL heartbleed only allowed reading of a specific reused collection of buffers (used for both security critical data and network I/O without clearing in between - for performance reasons), you cannot combine this with a Java String since they are by design not reuseable. Nor can you read into random memory using Java to get at the contents of a String. The language and design problems that lead to heartbleed are just not possible with Java Strings.
T61 0 u_josefx : @PetervdL then please do not refer the &quot;heartbleed bug in combination with Java Strings&quot; and I am sure most I mentioned in relation to heartbleed was correct, the libreSSL developers got quite detailed on why OpenSSL was a security nightmare. There &quot;may&quot; be a way to use a bug in the JIT to bypass Javas build in range checks or the automatic zeroing of object memory and it &quot;might&quot; be possible for someone to trigger this from a remote location without crashing the JVM, however that has nothing in common with heartbleed, nor would any bug on the JVM be so simple or optimized for exploits.
T61 0 u_DavidS : @PetervdL It&#39;s not just not &quot;specific&quot; to the Heartbleed bug; it&#39;s totally inapplicable. I suggest you don&#39;t reference Heartbleed as justification for security measures until you have a better grasp of its nature. Thanks to josefx for shedding light on this often misunderstood issue.
T62 0 u_ACV : There is yet another case - when the JVM crashes and produces a memory dump.
T62 0 u_Dawesi : Why would you store the password in in memory? external system? web or api request submits a string (ironically), so it&#39;s in memory anyway at that point. I&#39;d never store the login password in another variable (other than the readonly one it&#39;s sent to the server with) unencrypted for any reason?  Should web requests convert letters to their char number equiv to submit so the request variable is a number? As there is no char datatype from the browser?
T62 0 u_Stefan L : And for completeness let&#39;s not forget the more recent meltdown and spectre attacks: <a href="https://meltdownattack.com/" rel="nofollow noreferrer">meltdownattack.com</a> which could be exploited via a web browser or shared hosting environment.
T63 0 u_Benjamin Wootton : Though old style, this will help avoid ConcurrentModificationExceptions over the new foreach style in the answers below.  You can for instance remove via the seperate iterator.
T64 0 u_ : @karim79 what do you think about the following way: Map<Integer, Integer> map = new HashMap<Integer, Integer>(); for (Map.Entry<Integer, Integer> entry : map.entrySet()) { System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue()); } 
T64 0 u_vim : by calling &#39;it.remove(); &#39; you are emptying the map making it not reusable if this map was a class variable. Do you have any solution to that?
T63 0 u_Danny : @vimukthi what do you mean a solution to that? Just remove the <code>it.remove();</code> line.
T64 0 u_ : The for (Map.Entry<String, Object> cursor : map.entrySet()) {...} syntax is much better. 
T64 0 u_Whimusical : Is there any difference on chances of ConcurrentModificationExceptions   between both syntaxs in terms of calling remove() or not? Some answers imply contradictory assertions (first vs fourth comments)
T63 0 u_etlds : Iterator interface is generic since 1.2. It need to be Iterator&lt;E&gt;
T64 0 u_Victor : I consider that the answer of arvnid, despite is just a copy/paste or not. (I agree that is ethical to give the proper credits to the one who belongs)
T63 0 u_Puru-- : I landed up here accidentally, why did we do <code>Iterator.remove()</code> here? OP just asked for a best way for iterating over a <code>Map</code>
T64 0 u_J E Carter II : Note that it.remove will not work with unmodifiable Maps, like System.getenv() return String Map.
T64 0 u_Moebius : The full type of iterator is : import java.util.Iterator;
T64 0 u_Hele : @harto&#39;s answer is a better one as it tells the reader how to actually use this in a variety of cases. Your solution&#39;s application range is tiny. Very tiny.
T64 0 u_ : Don't you jump over the first entry using the "linewhile (it.hasNext())"? 
T64 0 u_Jwan622 : So the big picture steps seem to be 1. convert to a set using entrySet 2. turn it into an iterator and 3. call hasNext and turn each next Object into a Map.Entry Object?
T63 0 u_ashishduh : Everyone saying that <code>for (Map.Entry&lt;String, Object&gt; cursor : map.entrySet())</code> is better than this is ignoring the fact that you will still receive a <code>ConcurrentModificationException</code> using that method.  The selected answer remains the best method to iterate through a <code>Map</code>.
T64 0 u_apraetor : @J&#252;rgenK. No, <code>it.hasNext()</code> returns a boolean based on whether the iterator has another element beyond the current one but does not advance the iterator&#39;s state. The iterator isn&#39;t advanced to the next element until <code>it.next()</code> is called.
T64 0 u_NimChimpsky : @Alex yeah me too
T64 0 u_nemetroid : @ashishduh The selected answer is only the best in the <i>special case</i> where you need to modify the map during iteration. For all other uses, using an enhanced for loop is preferable.
T64 0 u_phil : This API is not intuitive, so I google this answer repeatedly and was at least 20 times on this answer!!
T64 0 u_Paŭlo Ebermann : @etlds Actually, Java 1.2 introduced Iterator, but didn&#39;t have generics back then. Generics were only added in 1.5.
T64 0 u_Impulse The Fox : Please do not use Iterator anymore.
T64 0 u_Androidcoder : i get unchecked cast and unchecked assignment warnings for &#39;(Map.Entry)it.next()&#39;. I did add a check to Map,Entry: &#39;Map.Entry&lt;Integer,MyObject&gt; entry&#39; to avoid other issues.
T64 0 u_Rishabh Agarwal : Since <i>Map</i> is not under <b>Iterator</b> class, <i>how can you use iterator with map ?</i> Only List, Queue and Set are iterable.
T64 0 u_Peter Mortensen : Perhaps update this for Java 8? (E.g. providing two versions, one for before Java 8 and one that only works on Java 8.)
T64 0 u_technazi : ConcurrentHashMap is an implementation of ConcurrentMap interface. ConcurrentMap Interface extends Map Interface. The confusion is because the question specifically asked for HashMap. HashMap is an implementation of Map interface.   It is always better to declare a ConcurrentHashMap like:  Map&lt;String,String&gt; myMap = new ConcurrentHashMap&lt;String,String&gt;();  instead of :   ConcurrentHashMap&lt;String,String&gt; myMap = new ConcurrentHashMap&lt;String,String&gt;();  This first practice allows extensibility. That is the reason this is a mature answer.
T64 0 u_Mader Levap : I consider it bad answer. OP was asking just for iterating over map, not how to modify map during iteration.
T66 0 u_ : If you do that, then it won't work as Entry is a nested Class in Map. java.sun.com/javase/6/docs/api/java/util/Map.html 
T65 0 u_jjujuma : you can write the import as &quot;import java.util.Map.Entry;&quot; and it will work.
T65 0 u_assylias : @Pureferret The only reason you might want to use an iterator is if you need to call its <code>remove</code> method. If that is the case, <a href="http://stackoverflow.com/a/1295383/829571">this other answer</a> shows you how to do it. Otherwise, the enhanced loop as shown in the answer above is the way to go.
T66 0 u_Josiah Yoder : I believe the form Map.Entry is clearer than importing the inner class into the current namespace.
T66 0 u_Saras Arya : where is map from  map.entrySet() declared ?
T66 0 u_Fallenreaper : quick Question: do the Generic values <code>&lt;String, String&gt;</code> need to match that of the Map? For Example, mine is <code>&lt;String, Foo&gt;</code>.
T66 0 u_intcreator : This is assuming your <code>Map</code> is named <code>map</code> of course.  Beginners might not catch on.
T66 0 u_jpaugh : @brandaemon Agreed. Even for intermediates, it&#39;s nice to see precisely which type implements the <code>entrySet</code> method.
T65 0 u_dguay : Note that you can use <code>map.values()</code> or <code>map.keySet()</code> if you want to loop through values or keys only.
T65 0 u_Marcus MacWilliam : That is not efficient. The Map holds the data in an entry set. For speed always iterate over the entry set.
T66 0 u_Androidcoder : I get and incompatible types error for &#39;Map.Entry entry&#39; and &#39;Map.Entry&lt;Integer,HashMap&gt; entry: &quot;required Object, found Entry&quot;. I&#39;m mapping integers to hashmaps. Having to use the keyset for loop because of this and pull the value through &#39;value = (HashMap) integertomap.get(key)&#39;, though less efficient then if I could use entrySet without iterater as per your example.
T66 0 u_JimmyB : @MarcusMacWilliam &quot;The Map holds the data in an entry set&quot; - This is not true for many <code>Map</code> implementations. See <code>TreeMap</code> implementation for example which traverses the tree for either keys, values or entries.
T65 0 u_Marquis of Lorne : @ScArcher2 No it isn&#39;t. It is a nested <i>interface</i>, and even if it was a nested c,ass it would still work. This code works. Been using. It for 15 years. No import required.
T67 0 u_earcam : +1 ClassLoader leaks are some of the most commonly painful memory leaks in the JEE world, often caused by 3rd party libs that transform data (BeanUtils, XML/JSON codecs).  This can happen when the lib is loaded outside your application&#39;s root classloader but holds references to your classes (eg. by caching).  When you undeploy/redeploy your app the JVM is unable to garbage collect the app&#39;s classloader (and therefore all classes loaded by it), so with repeat deploys the app server eventually borks.  If lucky you get a clue with ClassCastException z.x.y.Abc cannot be cast to z.x.y.Abc
T68 0 u_bestsss : tomcat uses tricks and nils ALL static variables in ALL loaded classes, tomcat has a lot of dataraces and bad coding though (need to get some time and submit fixes), plus the all mind-boggling ConcurrentLinkedQueue as cache for internal (small) objects, so small that even the ConcurrentLinkedQueue.Node takes more memory.
T67 0 u_Adrian M : +1: Classloader leaks are a nightmare. I spent weeks trying to figure them out. The sad thing is, as what @earcam has said, they are mostly caused by 3rd party libs and also most profilers can&#39;t detect these leaks. There&#39;s a good and clear explanation on this blog about Classloader leaks. <a href="http://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java" rel="nofollow noreferrer">blogs.oracle.com/fkieviet/entry/&hellip;</a>
T68 0 u_Daniel Pryden : @Nicolas: Are you sure?  JRockit does GC Class objects by default, and HotSpot doesn&#39;t, but AFAIK JRockit still can&#39;t GC a Class or ClassLoader that is referenced by a ThreadLocal.
T68 0 u_Matthijs Bierman : Tomcat will try to detect these leaks for you, and warn about them: <a href="http://wiki.apache.org/tomcat/MemoryLeakProtection" rel="nofollow noreferrer">wiki.apache.org/tomcat/MemoryLeakProtection</a>. The most recent version will sometimes even fix the leak for you.
T67 0 u_ : For future references, there is one more tool trying to solve classloader leaks: Plumbr 
T68 0 u_DiveInto : @DanielPryden Does this gist(<a href="https://gist.github.com/4057644" rel="nofollow noreferrer">gist.github.com/4057644</a>) shows what you described? but it won&#39;t go out of memory according to my test,correct me if there is any misunderstanding,thanks
T67 0 u_ : @DanielPryden I have update my gist,please check: gist.github.com/4057644#gistcomment-595443 
T68 0 u_Sid : Okay A little stupid question...Will it be termed as a memory leak,if the GC(Garbage Collector) doesn&#39;t kicks in? I am not sure whether one can invoke GC explicitly.
T68 0 u_Daniel Pryden : @Sid: the issue is not whether or not the GC actually runs (Raymond Chen argues that a no-op GC is a valid implementation, see <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/09/10047586.aspx" rel="nofollow noreferrer">Everybody thinks about garbage collection the wrong way</a>), it&#39;s whether, even if the GC did run, it would be unable to reclaim an object that is no longer visible to any running code.  A ClassLoader leak is one way to end up with objects that cannot be found or used, but that still occupy memory and are rooted for GC purposes, so the GC cannot reclaim them.
T68 0 u_Jack : It would be great if you could provide the code, I could not get all the steps! How to create one with a non-static member ? thanks.
T68 0 u_Daniel Pryden : @JackMoore: I don&#39;t have &quot;the code&quot;, this is just an example of a systemic problem. The issue is that a ThreadLocal creates a strong reference to an instance of a class, and through that instance to the class itself (and to all data statically reachable from the class), including the ClassLoader that loaded the class. But you can clear all references to the ThreadLocal object instance and not clear the underlying GC reference as long as the referenced Thread is still running. Basically, the Thread has an invisible, uncollectable reference to the ThreadLocal storage, which thus leaks.
T68 0 u_Daniel Pryden : @AfterWorkGuinness: See my response to Jack Moore. Does that make sense? The Thread itself can be a GC root even if, for all other intents and purposes, there are no more references to the given value reachable from Java code. If you have a thread pool and you load and unload classes using a ClassLoader, it&#39;s entirely possible that any particular thread in the pool may outlive the classes, and can this keep a large amount of memory (all classes in the ClassLoader, and all data statically reachable from any of them) &quot;reachable&quot; for GC purposes although the values can&#39;t be reached from code.
T68 0 u_AfterWorkGuinness : @DanielPryden could you post a code snipped for this ? I&#39;m having trouble visualizing it.
T68 0 u_Daniel Pryden : @igaurav: Regarding your edit to this answer, please see the discussion at <a href="http://meta.stackoverflow.com/questions/289814">meta.stackoverflow.com/questions/289814</a>
T68 0 u_Tamas Hegedus : I think this is not a &quot;true&quot; memory leak. One could still retrieve the loaded classes by investigating the <code>Thread</code> object&#39;s package visible <code>threadLocals</code> member field via reflection. So this isn&#39;t a more &quot;true&quot; leak than a simple unused private field.
T68 0 u_Daniel Pryden : @TamasHegedus: It&#39;s true that you can find specific cases of this using reflection, but that only works if the installed <code>SecurityManager</code> allows it, and it also depends on you being able to programmatically identify a type as being no longer in use. In a constrained case this is certainly doable, but I don&#39;t think it solves the general case.
T68 0 u_Tony : I am not sure whether I understand you right: The <code>thread</code> own the <code>ThreadLocalMap</code> which own <code>threadLocal</code> variable and <code>class</code>. But the content in <code>ThreadLocalMap</code> is weakly reachable, shouldn&#39;t it be GCed when memory is not enough?
T68 0 u_Daniel Pryden : @Tony: Each Thread holds strong references to every ThreadLocal. So the ThreadLocal values can&#39;t be GC&#39;d as long as the thread keeps running. This kind of problem often surfaces in an application container that owns a thread or thread pool that runs as long as the JVM does, which effectively keeps the garbage rooted forever. You&#39;re right though that if you ensure that all threads that could possibly be holding a ThreadLocal have been forcibly terminated, you can fix the leak. But in a large application that can often be an intractable task.
T68 0 u_Tony : Sorry, but I can&#39;t find any reference about &#39;Each Thread holds strong references to every ThreadLocal.&#39;. From source, the <code>ThreadLocalMap</code>&#39;s <code>Entry</code> is extended from <code>WeakReference</code>, shouldn&#39;t it mean the entry may be GCed when no strong reference to the entry holds? Thank you.
T68 0 u_Daniel Pryden : @Tony: the Javadoc on <code>ThreadLocal</code> says: &quot;Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the ThreadLocal instance is accessible&quot;. Empirically this prevents a Class object for the type of value stored in a ThreadLocal from being GC&#39;d while the thread is running: see the Gist I linked to in my answer for an example.
T68 0 u_Tony : Oh, the <code>class</code> also have a strong reference to its static field(<code>ThreadLocal</code> in this case), so this make <code>ThreadLocal</code> stay in memory. Isn&#39;t it?
T68 0 u_Brian Bulkowski : When I ask a question in an interview, especially like this, the answer isn&#39;t &quot;here&#39;s how you do it&quot;. I make a point of asking questions that don&#39;t have a look-it-up-on-stackoverflow answer. Instead, I expect a discussion about what a memory leak is, how java works, the internal data structures.  I am hoping for &quot;If you mean having a process consume a ton of memory and halt, there are a bunch of ways, I can show you a handful. Is that what you want? It&#39;s not technically a leak though.&quot; ( Then code it in 2 lines ). Or tell a war story about tracking one down. That&#39;s the person I want to hire.
T68 0 u_AMDG : Note that, since Java 8, there is no longer a permgen but the <a href="https://stackoverflow.com/questions/27131165/what-is-the-difference-between-permgen-and-metaspace">Metaspace</a>. Memory leaking still persists, but the main difference besides the name is that Metaspace size can be auto-incremented.
T68 0 u_Philip Rego : I&#39;m getting a recourse leak. I&#39;m calling Class.forName(&quot;com.informix.jdbc.IfxDriver&quot;); in a scheduled thread. Would that cause a resource leak?  @TamasHegedus
T68 0 u_Tamas Hegedus : @philiprego no, that wouldn&#39;t as far as you load the same driver every time
T68 0 u_Artanis Zeratul : @community wiki, so what if I can&#39;t get away with long running threads? like I need to fetch something perpetually from the DB or somewhere else?
T68 0 u_Daniel Pryden : @ArtanisZeratul: It sounds like you&#39;re trying to ask a new question. You can do that by clicking &quot;Ask Question&quot;. And &quot;community wiki&quot; isn&#39;t a person, it just means that all of the answers to this question are owned by the whole community rather than individuals.
T68 0 u_Malcolm : Why this elaborate scheme with the <code>ClassLoader</code> though? Why isn&#39;t it enough to create some objects and put them into <code>ThreadLocal</code>?
T68 0 u_Daniel Pryden : @Malcom: The reason the <code>ClassLoader</code> makes a difference is because, if you lose the reference to the <code>Class</code> that contained the reference to the <code>ThreadLocal</code>, you no longer have any way to get a reference to the <code>ThreadLocal</code> object. So the memory is leaked because you can&#39;t write code that can remove, or even retrieve, the leaked object anymore.
T68 0 u_jcsahnwaldt Reinstate Monica : @DanielPryden: @Malcom is right. When the value of the <code>ThreadLocal</code> points back to the <code>ThreadLocal</code> object itself (maybe directly, or through some intermediate references), there&#39;s a leak. It doesn&#39;t matter if the intermediate references are in a <code>ClassLoader</code> or not. Here&#39;s a small example that creates a memory leak simply by creating a <code>ThreadLocal</code> object that directly points back to itself: <a href="https://repl.it/@jcsahnwaldt/ThreadLocalLeakExample" rel="nofollow noreferrer">repl.it/@jcsahnwaldt/ThreadLocalLeakExample</a>
T68 0 u_jcsahnwaldt Reinstate Monica : @Tony: &quot;Oh, the <code>class</code> also have a strong reference to its static field (<code>ThreadLocal</code> in this case), so this make <code>ThreadLocal</code> stay in memory. Isn&#39;t it?&quot; - Well, the main thing is that the value of the <code>ThreadLocal</code> is a (direct or indirect) reference to the <code>ThreadLocal</code> itself. Due to some details of the <code>ThreadLocal</code> implementation in Sun&#39;s/Oracle&#39;s JDK, this creates a leak. The exact reference path to the <code>ThreadLocal</code> - whether directly, through static fields, or through instance fields - doesn&#39;t matter.
T68 0 u_jcsahnwaldt Reinstate Monica : By the way, the original implementation of <code>ThreadLocal</code> in JDK 1.2 didn&#39;t have that problem. Give it a try: download <a href="https://github.com/fanhongtao/JDK/blob/jdk_1.2.1/src/java/lang/ThreadLocal.java" rel="nofollow noreferrer">github.com/fanhongtao/.../jdk_1.2.1/.../ThreadLocal.java</a>, remove the package declaration, and compile and run it with @DanielPryden&#39;s sample code - no memory leak! (That implementation had other problems though. Josh Bloch mentions some of them here: <a href="http://cs.oswego.edu/pipermail/concurrency-interest/2007-October/004486.html" rel="nofollow noreferrer">cs.oswego.edu/pipermail/concurrency-interest/2007-October/&hellip;</a> )
T67 0 u_jcsahnwaldt Reinstate Monica : @Jepessen: &quot;I just don&#39;t understand why the thread must be long-running&quot; - In Sun&#39;s/Oracle&#39;s implementation of <code>ThreadLocal</code>, thread-local values are actually stored in a map that is attached to the thread. When the thread dies, the garbage collector eventually clears this map, which would also remove the memory leak in this example. <a href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Thread.java#L851" rel="nofollow noreferrer">github.com/openjdk/jdk/blob/master/src/java.base/share/class&zwnj;&#8203;es/&hellip;</a>
T69 0 u_Kip : Wow!  I&#39;ll try to convert this to Java and do a comparison, as well as an accuracy check on the results.  I&#39;ll let you know what I find.
T69 0 u_Kip : Testing on all values is impossible, but a test on suspect values (+/- 1 from very large perfect squares) has proven to be accurate.  On a run of the first billion integers, this only took 34% of the time required by the original algorithm.
T70 0 u_A. Rex : Awesome!  I&#39;m glad it worked out for you.  One thing that&#39;s different in C(++) and Java is that Java checks bounds on array lookups, so I thought you might take a hit there.
T70 0 u_Dimitre Novatchev : Seems that this only returns true/false, but it will be difficult to return the square root itself?
T69 0 u_ShreevatsaR : Wow, this is beautiful. I&#39;d seen Hensel lifting before (computing roots of polynomials modulo a prime) but I hadn&#39;t even realised the lemma could be carefully lowered all the way for computing square roots of numbers; this is... uplifting :)
T70 0 u_A. Rex : @Dimitre Novatchev: No, it would not be too difficult.  If the number is a perfect square, then its square root is <code>r</code> times some power of 2, which can be determined when dividing out by powers of 4.
T70 0 u_ : @A. Rex: HotSpot is able to eliminate bounds checks in certain circumstances stackoverflow.com/questions/4469483/bounds-checking-in-java so the hit is probably being avoided. 
T70 0 u_orlp : @A. Rex: I might be mistaken, but isn&#39;t 9 a perfect square? And doesn&#39;t <code>if( x &lt; 0 || (x&amp;2) || ((x &amp; 7) == 5) || ((x &amp; 11) == 8) ) return false;</code> filter it out as not being one? And similar for all other uneven perfect squares?
T70 0 u_ : @nightcracker It doesn't. 9 < 0 => false, 9&2 => 0, 9&7 == 5 => false, 9&11 == 8 => false. 
T69 0 u_Jason C : Maartinus posted <a href="http://stackoverflow.com/a/18686659/616460">a 2x faster solution</a> (and much shorter) down below, a bit later, that doesn&#39;t seem to be getting much love.
T70 0 u_maaartinus : @A.Rex AFAIK, the final test <code>t &lt;= (1LL &lt;&lt; 33)</code> is useless as you either get a square root or overshoot anyway. I dropped it and it works (but maybe there&#39;s a gotcha with numbers I haven&#39;t tried?).
T69 0 u_user1914292 : It seems like a lot of the speed advantage in the different solutions is gained by filtering out the obvious squares. Did anyone benchmark the situation of filtering out via Maartinus&#39; solution and then just using the sqrt function as that&#39;s a built-in function?
T70 0 u_ : LL in y & 4294967295LL not needed. 
T70 0 u_Ma&#235;lan : “Next, check if it&#39;s a square modulo 255 = 3 * 5 * 17. Because that&#39;s a product of three distinct primes, only about 1/8 of the residues mod 255 are squares.” Actually, the proportion of squares modulo 255 is 54/255 ≃ 0.212, much more than 1/8 = 0.125 (because the proportion of squares modulo each of the prime factors are slightly more than 1/2). But note that you are not limited to primes. The proportion of squares modulo 256 is 44/256 ≃ 0.172, and computing modulo 256 is much more convenient.
T70 0 u_Ma&#235;lan : That’s essentially one of the things maaartinus’ answer does, except that it uses 64 instead of 256 (which gives a more compact precomputed table with a better cache behavior, while still being pretty efficient at filtering out non-squares, as the proportion of squares modulo 64 is 12/64 ≃ 0.188).
T72 0 u_Covar : Worth noting PrintWriter will truncate the filesize to zero if the file already exists
T72 0 u_leonbloy : PrintWriter can be (and often is) used, but is not (conceptually) the right class for the job. From the docs: <code>&quot;PrintWriter  prints formatted representations of objects to a text-output stream. &quot;</code> Bozho&#39;s answer is more correct, though it looks cumbersome (you can always wrap it in some utility method).
T72 0 u_adesh singh : will it print the html file as well?
T72 0 u_JBA : @adeshsingh no one ever tried out so faar, be the first one!
T72 0 u_Marlon Abeykoon : So where will the textfile will be created after the app is build and used in another PC since we have not given the path?
T72 0 u_Michael : @MarlonAbeykoon Good question.  The answer is that it will create the text file in the <i>working directory</i>.  The working directory is whatever directory you execute your program from.  For example, if you execute your program from the command line, then the working directory will be whatever directory you are &quot;in&quot; at that moment (on Linux, type &quot;pwd&quot; to see the current working directory).  Or, if I double-click a JAR file on my desktop to run it, then the working directory will be the desktop.
T72 0 u_Rondo : If you want to append and not truncate u can replace PrintWriter with FileWriter: FileWriter(new File (&quot;the-file-name.txt&quot;), true).. one trade-off is FileWriter assumes default character encoding and buffer sizes
T71 0 u_kamoroso94 : The syntax for declaring the byte array is incorrect.  Should be <code>byte[] data = ...</code>.
T71 0 u_Thierry : <code>writer.close()</code> should be in a finally block
T71 0 u_Apollys supports Monica : Why is it bad practice to use <code>PrintWriter</code> for this job? Does it perform more slowly?
T71 0 u_ : @Apollys PrintWriter swallows exceptions: stackoverflow.com/a/1747092/4678667 
T71 0 u_lokesh : I would suggest to use File.createNewFile() method to create and verify file creation success.  It returns a boolean value : true if the file is created successfully. I don&#39;t like waiting for exceptions to tell something has failed. Only after file has been created and you have verified it, start writing data into it. It can save many bytes. <a href="https://howtodoinjava.com/core-java/io/how-to-create-a-new-file-in-java/" rel="nofollow noreferrer">Ref</a>
T73 0 u_Bathsheba : In short then, Java intentionally allows it: the &quot;bug&quot; is in the OP&#39;s IDE?
T73 0 u_Aaron Digulla : @Bathsheba: It&#39;s more in the heads of people. People don&#39;t try to understand how Java parsing works, so IDEs sometimes display the code in a wrong way. In the example above, the comment should end with <code>\u000d</code> and the part after it should have code highlights.
T73 0 u_Aaron Digulla : Another common mistake is to paste Windows paths in the code like <code>&#47;&#47; C:\user\...</code> which leads to a compile error since <code>\user</code> isn&#39;t a valid Unicode escape sequence.
T74 0 u_Reg : I understand introduction of unicode characters, but not so much why it is allowed in comments?
T74 0 u_bluelDe : In eclipse the Code after <code>\u000d</code> is highlighted partially. After pressing Ctrl+Shift+F the character is replaced with new line and rest of line is wrapped
T74 0 u_TheLostMind : So.. this is related to how the compiler parses the source-code file?. This problem can&#39;t be reproduced when we use <i>block comments</i> instead of single line comments
T74 0 u_aioobe : @Reg, there are many features of the language that doesn&#39;t make sense in conjunction with other features of the language. In this case, the language designers put the unicode escape handling before the parser, and being able to use unicode escapes in commens was simply a (possibly unfortunate) side effect.
T74 0 u_Gregor Ra&#253;man : While I agree with the answer from @aioobe that the source code is valid and the problem is rather in the IDE (and the source code highlighter on StackOverflow), please note that there is another &quot;problem&quot; with the code. The CR character entered as unicode escape sequence is interpreted as a correct start of a new line, but the line number is not incremented.
T73 0 u_aioobe : @UmaKanth, <code>&#47;&#47;</code> comments are skipped all the way to the next new-line character. <code>\u000d</code> is interpreted as a new-line character.
T74 0 u_Taemyr : @TheLostMind If I understand the answer correctly you should be able to reproduce this with block comments as well.  <code>\u002A&#47;</code> should end the comment.
T74 0 u_ : @Taemyr wow, \u002A/ is really evil, eclipse utterly fails to parse it. Put code between /*\u002A/ and /\u002a*/ and it's completely hidden as comment. Found this as bug 3533 
T73 0 u_R.. GitHub STOP HELPING ICE : Note that this could have been avoided completely if the language specification had forbidden using <code>\u</code> notation to represent anything representable in ASCII.
T74 0 u_Ben : @r good point, well made. At the very least this should be a Level 1 Compiler Warning.
T74 0 u_Mooing Duck : @R..: That would make it so that if you&#39;re developing on a computer that doesn&#39;t use ASCII, then there are many characters you can&#39;t type in, such as IBM Mainframes that use EBCDIC, which doesn&#39;t have curly braces.
T74 0 u_R.. GitHub STOP HELPING ICE : @TBohne: Do you actually have in mind such a character?
T74 0 u_Mooing Duck : @R..: Yes, curly braces.  <code>{}</code>
T74 0 u_R.. GitHub STOP HELPING ICE : @TBohne: Wikipedia claims they&#39;re at positions C0 and D0 in EBCDIC. It seems pretty ridiculous to expect programmers to use <code>\u</code> escapes for something as ubiquitous as braces...
T74 0 u_Mooing Duck : @R.: A quick glance shows you&#39;re right.  But it also contains &quot;Portability is hindered by a lack of many symbols commonly used in programming and in network communications, such as the curly braces.&quot; and &quot;It exists in at least six mutually incompatible versions&quot;.  I assume it must be a different version.
T74 0 u_supercat : @R..: One wouldn&#39;t have to forbid everything in ASCII if one were to specify that the first pass of compilation is subdivision into lines, and any new-line characters that get introduced after that will be processed as-is, such that <code>string st=&quot;Hello\u000D\u000Athere&quot;</code> would generate a twelve-character string containing a carriage return and a new-line.
T74 0 u_Jean-Fran&#231;ois Savard : If ever anyone is skeptic and want to test the hello world program, the class should be named &quot;Ugly.java&quot;. There is other funny thing that may be caused by this... For example, insert <code>LRM</code> character will allow you to compile code such as <code>for (char c‮ = 1; c‮ &gt; 0; c‮++)</code>
T74 0 u_Jean-Fran&#231;ois Savard : @biziclop Can we call it comment of the day even if it was posted 8 days ago ? :/
T75 0 u_Supuhstar : How efficient is this?
T75 0 u_Trevor Brown : Worth a read: <a href="https://jaxenter.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html" rel="nofollow noreferrer">jaxenter.com/&hellip;</a>  tl;dr - streams could be performant or not, it depends on what you&#39;re doing with them and the constraints of the problem (isn&#39;t this always the answer? lol)
T76 0 u_Marcin Zukowski : Yeah, it&#39;s a risky solution from the performance point of view. It might be fast, but I wouldn&#39;t bet my application&#39;s performance on it ;)
T75 0 u_Will Hardwick-Smith : Additionally, if <i>a</i> or <i>b</i> are arrays of primitive types, their streams will need to be <code>.boxed()</code> so they are of type <code>Stream</code> rather than e.g. <code>IntStream</code> which cannot be passed as a parameter to <code>Stream.concat</code>.
T75 0 u_Holger : @Will Hardwick-Smith: no, you only have to pick the right stream class, e.g. if <code>a</code> and <code>b</code> are <code>int[]</code>, use <code>int[] both = IntStream.concat(Arrays.stream(a), Arrays.stream(b)).toArray();</code>
T75 0 u_Lii : @Supuhstar: It is probably not as fast as <code>System.arrayCopy</code>. But not particularly slow either. You probably have to do this a <i>very</i> many times with <i>huge</i> arrays in <i>really</i> performance sensitive contexts for the execution time difference to matter.
T76 0 u_Sina Madani : I wonder which is faster and more memory efficient: the concat method or flatMap? Or are they the same under the hood?
T76 0 u_Dave L. : The latter solution is nice because it can be used for more than 2 arrays unlike most (if not all) the other answers.
T76 0 u_Holger : @SinaMadani with all known implementations, the variant using <code>concat</code> will be faster and need less memory, because it can predict the resulting array size beforehand and will create and fill only one array. In contrast, the <code>flatMap</code> based solution will have to use a resizable buffer internally, with at least one final copying step.
T76 0 u_Artsiom Chapialiou : Is it possible to make it works for generic type (like in the answer above)? Something like <code>T[] both = Stream.of(a, b).flatMap(Stream::of).toArray(T[]::new);</code> Looks like <code>T[]::new</code> isn&#39;t allowed cause of type erasure...
T76 0 u_Lii : @ArtsiomChapialiou: You can, but it&#39;s not so pretty. You have to use reflection to create the array, and thus get an unchecked cast. I added that to the solution text.
T77 0 u_ : This answer is more correct than try it because current behavior is not the same as guaranteed behavior. 
T78 0 u_ : This question comes into play during Joshua Bloch's chapter on object equality in Effective Java - amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683 
T77 0 u_Andy Thomas : Specifically, in Item 8, he notes that in equals() methods, one instanceof operator serves two purposes - it verifies that the argument is both non-null and of the correct type. &quot;...[S]o you don&#39;t need a separate null check.&quot;
T78 0 u_Ben Thurley : I don&#39;t see them ever changing this. It can only return true or false so how can can it ever be true for a null reference to be an instanceof anything?
T77 0 u_Andy Thomas : @BenThurley - Java&#39;s <code>instanceof</code> operator was part of Java 1.0, released almost 20 years ago. Changing the behavior now in a way that would break existing code is unlikely, absent some benefit that outweighs that huge cost. Twenty years ago, maybe there could have been arguments for returning true iff the argument could be cast, or throwing an exception for a null argument. But those definitions would have required separate null checks.
T78 0 u_Ben Thurley : Exactly my point. It&#39;s true that current behaviour is not the same as guaranteed behaviour but in this case I think it&#39;s pretty well guaranteed.
T77 0 u_Andy Thomas : @BenThurley - The behavior is guaranteed by Java specifications past and present. I think Luke&#39;s point addresses the limitations of experimentation in determining the guaranteed behavior of the present.
T78 0 u_GabrielBB : Why the compiler let you do this: &quot;null instance of Class&quot; lol. I mean, if it is a hardcoded null, it doesn&#39;t make sense to even ask it
T77 0 u_Holger : @GabrielBB that’s like writing with a red pen on a red paper. Even if it makes no sense, it’s possible due to the general possibility to combine an arbitrary pen with an arbitrary paper. And implementing a “writing on the same color” check into a pen would complicate the technology for little to no benefit.
T79 0 u_Stephen C : See &quot;Additional Notes #1&quot; of my Answer.  For a better explanation of this problem.
T79 0 u_kmort : @StephenC Yes, your answer is more complete (and of course, +1), but this particular answer had the word &quot;package&quot; in it, which allowed me to find what I needed fast. And it worked. So +1 Razavi. StephenC, yours lacks the simple package example I needed as I am new to Java.
T79 0 u_John : This was exactly my problem. I have been wading through tons of Java doc and this concrete example is what I needed
T80 0 u_M-Razavi : Its better to make &#39;Runnable JAR File&#39; to execute class file.
T79 0 u_Pixel : Yes, concrete example is nice, this worked perfectly. I&#39;m sure the main answer is very thorough, but it was difficult to see the tree for the forest. Nice one @Razavi
T79 0 u_Spara : I like this shorter and useful answer instead of accepted one!
T81 0 u_Alex Spurling : This is probably the best solution presented so far. The reason I didn&#39;t spot this facility when I first looked at the DecimalFormat class is that it was only introduced in Java 1.6. Unfortunately I&#39;m restricted to using 1.5 but it will be useful to know for the future.
T82 0 u_Martin Clemens Bloch : Doesn&#39;t work with exponent decimalformats, say format(&quot;0.0E00&quot;). It will in this example round 0.0155 to 0.0E00 instead of 1.6E-02.
T82 0 u_ : I tried this with: "#.##", rounding HALF_UP. 256.335f -> "256.33" ...(example comes from comments to @asterite's answer). 
T81 0 u_Gomino : Please be carefull as DecimalFormat depend on your current Local configuration, you may not get a dot as a separator. I personnally prefer Asterite&#39;s answer below
T82 0 u_CGK : Also be aware that you should not expect DecimalFormat to be thread-safe.  As per <a href="https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html" rel="nofollow noreferrer">Java docs</a>: <i>Decimal formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.</i>
T81 0 u_user4919188 : how do i make it so that it does a proper rounding so it will not round 0.0004 to 0.001
T82 0 u_Thorsten Niehues : Cannot get this working with HALF_UP: Example <code>DecimalFormat df = new DecimalFormat(&quot;0.00&quot;); 		df.setMaximumFractionDigits(2); 		df.setRoundingMode(RoundingMode.HALF_UP); df.format(3.775)</code> returns 3.77
T81 0 u_Dawood ibn Kareem : It&#39;s not too difficult to create cases where this simply doesn&#39;t work.  I wouldn&#39;t use this method if it&#39;s important to get the correct result.
T81 0 u_fishinear : @ThorstenNiehues Just because you specify it as 3.775, does not mean it has that value internally. Internally it has a binary value, and 3.775 cannot be represented exactly as a binary value. So it might have a value corresponding to 3.77499999999 internally. When rounding, always add the expected accuracy of the value.
T82 0 u_Thorsten Niehues : @fishinear THX :)
T84 0 u_digiarnie : Prior to me putting the high number for the threshold, I had the settings set up like you said already but it still put in the wild card imports (i.e. I had &quot;use single class import&quot; checked and removed all packages in the &quot;packages to use import with *&quot;...
T84 0 u_duffymo : Working for me.  Let me see what else I might have set.  Version 9.0.3 for me.
T84 0 u_digiarnie : So if you do 11 imports of classes from the same package the wild card import doesn&#39;t kick in?  As a test, I have my threshold set to 2.  If I import something from org.hibernate let&#39;s say, it will put the import correctly (fully qualified).  As soon as I import something else from org.hibernate it will stick in the wild card import, which kind of tells me either my version of intellij doesn&#39;t behave like yours or the only solution is to put a high threshold so I never run into this issue
T84 0 u_ : If you're using IntelliJ 12 or later then this can be configured under "Code Style" -> "Java" -> "Imports" 
T84 0 u_duffymo : Read my answer - see the &quot;Click on the Settings&quot; bit?  It&#39;s been true since IntelliJ 7.  Already been answered for more than three years.
T83 0 u_PotataChipz : In case it saves someone else the confusion: In my enthusiasm for never collapsing imports, I put an unreasonably long string of 9&#39;s in the &#39;class count to use...&#39; field, and this caused IntelliJ 12 to silently ignore the value. &#39;9999&#39; works fine.
T83 0 u_Stephen Hartley : Is there really no way to tell Intellij 15 never to use wildcard imports? I mean without specifying a class count??!
T83 0 u_duffymo : Why is adding a class count so oppressive?  Why not ask JetBrains for an enhancement if this is so odious?
T84 0 u_MCory : For the record (at least in IntelliJ Ultimate 2016), trying to set the value to an extremely large number of 9&#39;s won&#39;t work. If you add more than 5 9&#39;s, the &quot;Apply&quot; button grays itself out and the setting won&#39;t take - instead of just <i>not</i> allowing you to only enter 5 9&#39;s. I found this out because I was lazy and just wanted to add a bunch of 9&#39;s to make sure it would never be close to an issue at all :)
T83 0 u_duffymo : Looks like three nines should be enough. If you need more than a thousand imports I&#39;d say your class should be refactored.
T83 0 u_Glenn Bech : Can&#39;t believe programmes programmed a program for programmers the way this is programmed.  This confusing dialog is still not fixed in 2016.3, is there a bug for it, or somewhere we can vote?
T84 0 u_Paulo Merson : Interesting enough, for <i>Kotlin</i> the option is less confusing: &quot;Use import with &#39;*&#39; when at least [99] names used.&quot;
T84 0 u_Thorbj&#248;rn Ravn Andersen : @GlennBech Just contact them on the &quot;Submit feedback&quot; entry in the Help menu.
T85 0 u_StealthVice7 : Why is the nio package better? Does it work in the same way? What even is nio?
T86 0 u_Benoit Vanalderweireldt : It&#39;s not fundamentally better and using the standard io package is fine, I&#39;m not sure where is your error coming from but having a clean example of file deletion (starting with a .) might be a good starting point.
T86 0 u_StealthVice7 : My program works perfectly fine with all other test files I made, but not the <code>.minecraft</code> file.
T85 0 u_ : System.getProperty("user.home") returns the user's desktop on windows. Use System.getProperty("user.home") + "/.." or similar instead. 
T86 0 u_StealthVice7 : What does /.. do? And my program was working fine with all other files with the way I had it.
T86 0 u_Benoit Vanalderweireldt : / is the root path .. means the parent folder so /.. means the parent folder of root which is incorrect
T86 0 u_Majora320 : @BenoitVanalderweireldt Wrong, with <code>&lt;somepath&gt; + &quot;&#47;..&quot;</code> it means the parent folder of <code>&lt;somepath&gt;</code>, so in this case it would return the parent folder of the desktop.
T85 0 u_ : /.. != '"<somepath>" + "/.."' 
T85 0 u_StealthVice7 : Guys I figured out my mistake, the folder had other files inside of it, so I had to delete the insides before I could delete the folder.
T85 0 u_StealthVice7 : Hey can you guys undownvote my question? I can&#39;t post any more.
T87 0 u_Alderath : +1. Imo, this is more constructive than the top voted answer. It comes with two minor downsides though. The PriorityQueue does not support random access. You cannot do peek(elementIndex). So you cannot do e.g. <code>Integer maxVal = prioQueue.peek(prioQueue.size() - 1);</code>. Secondly if you&#39;re intending to use the PriorityQueue simply as a sorted list, it will sound less intuitive to see <code>PriorityQueue</code> in the code than it would have been to see <code>SortedList</code>, if such a data structure existed.
T87 0 u_Alderath : And, after looking at the other question which someone linked in the comments, another <b>big disadvantage</b> is that the iterator of PriorityQueue is not guaranteed to return elements in any specific order. So, unless I am overlooking something, the only way to e.g. print all objects in the PriorityQueue in order is to repeatedly poll() the queue until it is empty. To me, this feels borderline retarted. To print the objects in a PriorityQueue twice, you&#39;d first have to copy the PriorityQueue and then poll() all objects from the original PriorityQueue and then pol()l all objects from the copy.
T88 0 u_Spoike : Hmm... looks like you&#39;re right Alderath. You can&#39;t use the iterator of PriorityQueue to get the elements in expected order. Looks like I have to edit my answer.
T88 0 u_bestsss : Sorted list is implemented via tree, otherwise it&#39;s just way too costy
T87 0 u_bestsss : Priority queue is just a heap, you can access only the top, imo it does not belong to the answer of the question.
T88 0 u_Mike &#39;Pomax&#39; Kamermans : Also worth noting is that <code>Collections.sort()</code> even lets you define the compare function that is used to sort, by using a <code>Comparator</code> object.
T87 0 u_user2223059 : I would argue that there is a need for some kind of sorted, indexed collection. I&#39;m working on an application, and I need a data collection that is accessible via an index number, but maintains a very specific order. I don&#39;t want to have to use sort() or comparators all the time. So yeah, I&#39;m probably going to create a custom collection that just inherits from Collection, rather than list, that fulfills this function.
T87 0 u_Caitlin : The TreeMultiset allows for multiples in a really weird way. If you have two objects that have the same key, instead of actually inserting all of the objects into the Multiset, it just keeps track of the count that match that key. This is fine if you are using primitives. But if you are using objects, and plan on using other pieces of the object, it won&#39;t return the objects expected.
T88 0 u_juanmf : @Spoike ` because the add methods should ensure that the element will reside in the index that the user specifies` actually,it adds at the end, you can specify index in a Map, with <code>put()</code>. Am I confused?
T88 0 u_Spoike : @juanmf The key (or index) for a <code>Map</code> is not the same thing as the index for a <code>List</code>. Using <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Map.html#put(K,%20V)" rel="nofollow noreferrer"><code>put()</code></a> there is no way for sure that putting something in a lower number and something in a higher number will come in the order you want when you iterate on the entrySet of the map (i.e. unless you sort the entrySet by the key).
T88 0 u_Torque : A huge downside to all of these suggestions is the missing .sub*-function that SourtedMap and SortedSet provide, and that at least in my experience is the most needed feature.
T88 0 u_Marcono1234 : @Spoike, the own implementation of a SortedList can be written more efficiently. Since a random access list is used (<code>ArrayList</code>) and you know that it is already sorted before adding a new item, you can use <code>Collections.binarySearch</code> to get the index where the new item should be inserted.
T90 0 u_rmeador : You don&#39;t need to create a class to pass by reference in java (though that would certainly work).  You can use the <code>Integer</code> class, which is part of the standard library, and it even has the benefit of being auto-boxed to and from <code>int</code> <i>almost</i> transparently.
T89 0 u_ILMTitan : @rmeador Integer is immutable, so you still couldn&#39;t change its value. AtomicInteger, however, is mutable.
T90 0 u_Dan Tao : @rmeador: I&#39;m asking because I honestly don&#39;t know, not to challenge you: how would this work, what you&#39;re suggesting? What I mean is, how can you assign a new value to <code>x</code> from within a method, even if it <i>is</i> boxed as an <code>Integer</code>? (Is the <code>Integer</code> type not immutable?) I know that in .NET, using C# for example, you could box an <code>int</code> as <code>object</code> but you still wouldn&#39;t be able to <i>assign</i> a new value to the variable holding that <code>int</code> from within a method, unless it were passed as a <code>ref</code> parameter.
T90 0 u_rmeador : @Dan Tao: yeah, as @ILMTitan points out, it&#39;s immutable... I forgot that little detail.  The suggestion of AtomicInteger seems reasonable, but I don&#39;t think you get autoboxing with that class.
T89 0 u_axtavt : @Dan: By the way, <code>x</code> in your last example must be declared <code>volatile</code>, otherwise it&#39;s an undefined behaviour and seeing <code>1</code>s is implementation specific.
T90 0 u_Dan Tao : @axtavt: Good point -- I actually discovered this myself after last updating my answer when I changed the code only slightly and saw different behavior (all 0s, no 1s). I&#39;ve updated the answer to include the <code>volatile</code> keyword so that the program&#39;s behavior is defined.
T90 0 u_ : simple answer: operator precedence of ++ before =. See cppreference.com/wiki/operator_precedence The "infinite loop" part of title is misleading. 
T89 0 u_Dan Tao : @burkestar: I don&#39;t think that link is <i>quite</i> appropriate in this case, since it&#39;s a Java question and (unless I&#39;m mistaken) the behavior is actually undefined in C++.
T90 0 u_Tom Brito : Something to say about my last comment on the question?: It&#39;s very strange that in C language the behavior is different. Maybe in C it first read the value and then, later, it increments, while in Java it increments then return the old value..
T89 0 u_detly : @Tom Brito - in C it&#39;s not defined... the <code>++</code> <i>could</i> be done before or after assignment. Practically speaking, there might a compiler that does the same thing as Java, but you wouldn&#39;t want to bet on it.
T89 0 u_Jason C : This is a very verbose way of saying the right side of an assignment expression is evaluated first.
T90 0 u_ : @burkestar Operator precedence is irrelevant here because (x = x)++ isn't legal. And the "infinite loop" part of the title is a fact; it's not at all "misleading". 
T91 0 u_jaxad0127 : Just to note, <code>main</code> could be a keyword that is only usable as a name for a static method with an appropriate signature (or whatever). Note that super class calls use <code>super</code> in a way that makes it look like an identifier: <code>super(foo);</code> and <code>super.foo</code>, but <code>super</code> IS a keyword (and before generics were added, this was the only way to use it (that I can remember)).
T92 0 u_davidxxx : @jaxad0127 Interesting point but I don&#39;t agree completely.  Actually it IS not and in the future it could probably not be for still compatibility reasons. If you defined <code>main</code> as a keyword in a new version of java, it means that any code that uses main as method name (or any member names) will not compile any longer.   The usage of <code>super</code> in generics doesn&#39;t have any side effect in existing code as generics didn&#39;t exist at this time.
T91 0 u_jaxad0127 : I just meant that it COULD have been done as a keyword. Just because it looks like an identifier, doesn&#39;t mean it has to be.
T92 0 u_GeroldBroser reinstates Monica : @jaxad0127 Without going too deep into the JLS and for the two cases you mention I think it can be said that <code>super</code> is a special expression: It represents a reference to a <code>Class</code> object to be used with the object&#39;s constructor and its members.
T91 0 u_AJPerez : I would argue that <code>main</code> is still a better identifier than <code>java1234</code>. Using it for a &quot;regular&quot; method would be misleading, but I&#39;d have no problem naming a variable <code>main</code>, if it&#39;s actually the main something in my method. <code>java1234</code> is just awful, names should be descriptive...
T91 0 u_jpmc26 : &quot;About the question, is main a good identifier?&quot; It depends. I probably wouldn&#39;t bat an eye at a variable named <code>main</code> if the function I was looking at did something with water main data. I&#39;d throw up if I <i>ever</i> saw <code>java1234</code> in production code (and pray there were not 1233 other variables with the prefix <code>java</code>).
T92 0 u_Holger : @jaxad0127 <code>main</code> could have been defined to be a keyword, it could still become a keyword, just like <code>_</code> stopped to be a legal identifier, however, it is not and this was a deliberate decision. The Java designers decided that, e.g. <code>goto</code> and <code>const</code> are keywords, to prevent their use as misleading identifiers, but <code>main</code> does not require such special treatment.
T91 0 u_davidxxx : @AJPerez I completely agree. But well both are bad.  You could notice that I added <code>main</code> as variable name but I didn&#39;t quote it in things that we don&#39;t want (not the hazard). But I will remove it to be consistent.
T94 0 u_serg : Looks nice and simple, only I have feeling that shutdown here is used not for what it was designed (or it is fine?).
T94 0 u_cletus : It&#39;s a common pattern. Transient threadpools like the above are good for several reasons and I pretty much always prefer them to persistent threadpools where a lot more can go wrong or at least it can be harder to figure out. The above is really straightforward which is why I like it.
T93 0 u_matt b : this is exactly what shutdown / awaitTermination are meant for
T93 0 u_sjlee : It is a good pattern if this task handling is a one-time event.  If this is done repeatedly during the same runtime, however, it is not optimal, as you would create and tear down threads repeatedly every time it is executed.
T94 0 u_象嘉道 : This pattern is <b>incomplete</b>: Some unsubmitted tasks may be never executed.
T94 0 u_inanutshellus : @Kejia It is not incomplete... Think about it this way: Your main thread is spawning off subthreads in a loop. When it&#39;s done adding, you run this code. <b>You might see output out of order</b>, but all of your tasks will have been spun off. Thanks @Cletus!
T93 0 u_Sam Harwell : I&#39;m looking for any official documentation that <code>Long.MAX_VALUE, TimeUnit.NANOSECONDS</code> is equivalent to not having a timeout.
T94 0 u_Brad : @serg is this still considered the best answer over using <code>invokeAll()</code> as proposed by sjlee?
T94 0 u_rogerdpack : I can&#39;t believe that you have to use shutdown in order to join on all the current threads (after using shutdown, you cannot use the executor again ever).  Suggest using list of Future&#39;s instead...
T94 0 u_jontejj : As I&#39;m testing this out I found that the executor finishes before all tasks have completed. If I use Thread.sleep(100) before calling shutdown() it works. So I suspect that there may be some timing issues with your code if the time between adding tasks to the shutdown call is too small.
T94 0 u_Nazgul : this wont work if you dont want to shutdown the executor. For a perpetually running batch kind of thing u need to submit jobs and wait for them to finish before jumping ahead. In Such a case a latch or a barrier makes more sense than a shutdown.
T93 0 u_gerrytan : IMO it&#39;s probably not a wise thing to NOT have a timeout. There&#39;s always a likelihood your task is stuck / deadlocking and the user would wait forever.
T94 0 u_Zero3 : @ashutosh I can&#39;t find any documentation on this. It appears to be a method of a Spring library, and not plain Java functionality.
T94 0 u_ : @SamHarwell see the java.util.concurrent package documentation under the Timing section: To wait "forever", you can use a value of Long.MAX_VALUE 
T94 0 u_ToolmakerSteve : @ashutosh 1) That requires <i>springframework</i>.  2) Doesn&#39;t look any simpler to me than shutdown/awaitTermination.
T94 0 u_Praveen Kumar : Is it better than using infinite loop while checking isTerminated() ?
T94 0 u_Sergio Bilello : If I don&#39;t want to shutdown because I want to keep my executor alive. How can I know the maximum number of pending tasks that could I have there?
T94 0 u_hinneLinks : @SamHarwell <code>TimeUnit.NANOSECONDS</code> and <code>Long.MAX_VALUE</code> equals 106,751 Days or 292 years (<code>TimeUnit.NANOSECONDS.toDays(Long.MAX_VALUE);</code>), that should be enough, or use some of the bigger TimeUnits.
T94 0 u_eli-bd : When sizing thread pools, it is often useful to base the size on the number of logical cores in the machine running the application. In Java, you can get that value by calling Runtime.getRuntime().availableProcessors(). In this case, it would be Math.min(4, Runtime.getRuntime().availableProcessors());
T93 0 u_Jobs : executor.shutdown(); is stopping my program !!
T94 0 u_Mobigital : Java apis are pretty terrible. Thank you for this insight.
T94 0 u_gaurav : @cletus is awaitTermination() necessary after shutdown()?
T96 0 u_Ulrich Schmidt : Well, this effectively means that any Function can always be used as a Consumer, right? I wasn&#39;t aware of this design choice, so thanks for pointing this out. Still, why then are Function Lambdas like s -&gt; s not allowed as Consumer arguments?
T96 0 u_Czyzby : Well, there&#39;s always the Java typing issue, so you can&#39;t pass a constructed <code>Function</code> as <code>Consumer</code> or cast/assign it to a <code>Consumer</code> variable. It still uses the same old Java typing mechanism - you can think of lambdas as anonymous classes, except with prettier syntax and different internals. (I won&#39;t go into details, but chances are that they do not compile into the same exact bytecode.) <i>However</i>, any method that could construct a <code>Function&lt;A, B&gt;</code> (that consumes type <code>A</code>), could be used to construct a <code>Consumer&lt;A&gt;</code>.
T95 0 u_Czyzby : About the <code>s -&gt; s</code> - my guess is that if you explicitly define a new lambda without referencing an existing method, you <i>have</i> to follow its exact method signature. In this case, <code>Consumer&lt;String&gt;</code> does not return anything, so you cannot just end the lambda with a line that basically stands for <code>return s;</code>. <code>s -&gt; s.toString()</code> (which would pretty have the same result) should work, as the method would be simply invoked and its result (<code>s</code>) would be ignored.
T96 0 u_Ulrich Schmidt : It does work indeed! Amazing! <code>s -&gt; s</code> triggers a compiler error &quot;Void methods cannot return a value&quot; but <code>s -&gt; s.toString()</code> is accepted. I still don&#39;t understand the difference between these two Lambda expressions.
T95 0 u_Czyzby : <code>s -&gt; s</code> is an equivalent of <code>s -&gt; { return s; }</code>, which fails to compile, as <code>Consumer</code> method cannot return a value. <code>s -&gt; s.toString()</code> might seem to &quot;do&quot; the same thing, but it actually is an equivalent of <code>s -&gt; { s.toString(); }</code>, which simply invokes a method, but does not return anything. So - in the first example, you&#39;re trying to <i>return</i> a value. In the second, you&#39;re actually invoking a method and ignoring its result.
T96 0 u_ : I think I understand it now :-) If the target type is a Consumer, then s -> s.toString()is interpreted as s -> { s.toString(); }. If the target type is a Function, then the same lambda is interpreted as s -> { return s.toString(); } 
T95 0 u_Czyzby : Yes, that&#39;s it. Is there anything you&#39;d like me to add to the original answer or can it be accepted as it is?
T96 0 u_Ulrich Schmidt : Your original answer is certainly acceptable in light of our discussion. Thanks again for your patience in explaining these things. Type inference does sometimes lead to suprising conclusions!
T95 0 u_Brian Goetz : Here&#39;s the basis for this design decision: Java allows you to <i>call</i> a method and ignore the return value (a method invocation expression as a statement).  Since we allow this at the invocation, we also allow this when adapting a method to a functional interface whose arguments are compatible but the functional interface is void-returning.
T95 0 u_Brian Goetz : Note also that we&#39;ll do other adaptations (boxing, unboxing) to make the shape of the lambda match up with the expected shape of the functional interface.  Ignoring a return value is just one of those adaptations.
T96 0 u_Hank D : A convenient way to adapt a <code>Function&lt;T,R&gt;</code> to a <code>Consumer&lt;T,R&gt;</code> is to append <code>::apply</code> to a Function instance; then the Function return type can be ignored like any other method that returns a value, e.g. <code>Function&lt;String,Integer&gt; f = String::length; Consumer&lt;String&gt; c = f::apply;</code>
T98 0 u_Martin : This has changed now. You can use Java 7 as well. As long as you don&#39;t use try with resources.
T97 0 u_Ben Leggiero : Did Java 8 change the way the bytecode works? If not, it should be fine to use any version of Java, theoretically, as long as it compiles.
T97 0 u_Eng. Samer T : the correct question is: what if you use new features in java 8 not exists in java 7 to build android app, is it ok? to be on safe side follow official instructions.
T97 0 u_ : @BenC.R.Leggiero there's no new bytecode in Java 8, but the instructions' meanings and structures were changed stackoverflow.com/questions/28228450/… stackoverflow.com/questions/16143684/… 
T97 0 u_Aleksandr Dubinsky : Please do not post &quot;Update N&quot; in your answer. Rewrite it to have up-to-date information. Otherwise, SO will in a few years be as difficult to get information from as the forums it superseded.
T98 0 u_Neon Warge : As I understand it, It says Android N is supporting Java 8, so it means APIs &lt; Android N doesn&#39;t have it. Is this correct?
T98 0 u_ : Jack toolchain is now deprecated as per this announcement. Replacement is in the works. 
T98 0 u_user239558 : This answer needs to be updated.  The first sentence &quot;I think it is too early to say if Java 8 is suitable for Android development&quot; is completely outdated an links to old data.  The &quot;Updated&quot; stuff is also very old.
T98 0 u_Guillaume Husta : Not all Java 7 features are available in Android. Like the package <a href="https://developer.android.com/reference/java/nio/file/package-summary.html" rel="nofollow noreferrer">java.nio.file</a>. It will be available in Android O as I understand ?
T97 0 u_Юрій Мазуревич : Answer need to be update. Java 8 will is supported as of Android Studio 3.0 and Gradle Plugin 3.0.
T100 0 u_Federico Peralta Schaffner : So maybe this should be reported as a bug?
T100 0 u_Holger : @FedericoPeraltaSchaffner I don’t know whether the behavior matches the specification. I just used the word “flaw” from the practical point of view. I didn’t have the time to check the specification yet and this part of the spec is one of toughest…
T99 0 u_JimmyB : I don&#39;t think it&#39;s a &quot;flaw&quot;: <code>Consumer&lt;? super Supplier&gt;</code> would even match <code>Consumer&lt;Object&gt;</code>, and <code>Object</code> is not a funtional interface. By downcasting to <code>Supplier</code> you make the potentially-Object an instance of a functional interface again.
T99 0 u_Holger : @JimmyB <code>Consumer&lt;? super Supplier…&gt;</code> <i>could</i> be a <code>Consumer&lt;Object&gt;</code>, but you see at the <code>action</code> variable that the compiler does not assume <code>Consumer&lt;Object&gt;</code>, as the lambda expression <code>s -&gt; System.out.println(s.get())</code> invokes the supplier’s <code>get</code> method without problems. Here, the compiler <i>does</i> assume the most specific type which is <code>Consumer&lt;Supplier&lt;? extends String&gt;&gt;</code>. And it could do the same for the invocation of <code>accept</code>. See the last example of my answer which doesn’t have a type cast. These assignments are valid.
T99 0 u_JimmyB : @Holger No, your last example does not have an explicit cast. But your <code>supp</code> is <i>not</i> of type <code>? super Supplier</code> but of type <code>Supplier</code> which amounts to the same as the other example with an explicit cast. When <i>using</i> <code>action</code> its <i>declared</i> type is what matters to the compiler, and that type does not guarantee that there&#39;s a supplier involved. In other words, <code>? super Supplier</code> means that <code>consumer.accept(new Object())</code> would be valid w.r.t. generic types. Hence, the compiler only knows that some <i>object</i> is required and fails to see how <code>customer::getName</code> should target the non
T99 0 u_ : functional interface type Object. 
T100 0 u_JimmyB : By the way, <code>? super X</code> is meant to designate some kind of &#39;container&#39; for objects of type <code>X</code>, i.e. it is guaranteed that I can assign an instance of type <code>X</code> to a given variable (ensures assignability). In the case of the OP this is not needed because he won&#39;t be assigning anything to the given supplier reference inside his consumer.
T99 0 u_ : @JimmyB You can not do consumer.accept(new Object()). The declaration Consumer<? super Supplier<? extends String>> action implies that you can assign a Consumer<Object> to action, because a Consumer<Object> can also handle Supplier<? extends String> arguments in its accept method. But since it is also possible to assign a Consumer<Supplier<? extends String>> to it, as happening implicitly in my examples, it would never be valid to pass new Object() to the accept method. The argument to accept must be assignable to Supplier<? extends String>. So why not infer that… 
T100 0 u_JimmyB : @Holger No, the argument to accept must be a <i>super</i> type of Supplier. That&#39;s what ? super Supplier declares, and that does not make sense in this case. Consumer&lt;Supplier&gt; declares what you intend, making only instances of Supplier acceptable.
T100 0 u_Holger : @JimmyB: Apparently, you are so convinced of yourself that you didn’t even <i>try</i> it. Since you are only repeating yourself, this pointless discussion has to stop here.
T100 0 u_JimmyB : @Holger While I do understand your point, obviously the compiler proves both of us wrong: It does not in fact accept <code>new Object()</code> (<b>although</b> the effective declared method becomes <code>accept(Object t)</code>), but on the other hand it does not infer the need for  a <code>Supplier</code> (<b>because</b> the effective declared method becomes <code>accept(Object t)</code>).
T100 0 u_Holger : @JimmyB: There is no such thing as “effective declared method”. Apparently you are confusing this with type erasure, but type erasure has nothing to do with what is valid under the generic type system. As said several times, the signature <code>Consumer&lt;? super Type&gt;</code> implies that the <code>accept</code> method requires <code>Type</code>, the relevant difference to <code>Consumer&lt;Type&gt;</code> is that the actual implementation may be a consumer of a super type. But in the example of the answer, it is not. There, it is a <code>Consumer&lt;Supplier&lt;? extends String&gt;&gt;</code>.
T100 0 u_JimmyB : @Holger Yes, I am referring to type erasure. And through that, <code>Consumer&lt;? super X&gt;</code> gets its <code>accept()</code> as <code>accept(&lt;? super X&gt;)</code> (itself not valid syntax), and that method should accept anything of <code>X</code> or a super type, hence when typing eclipse offers me <code>accept(Object t)</code>.
T100 0 u_JimmyB : @Holger I think, together we can pin down the issue: You are correct in that <code>Consumer&lt;? super X&gt; action</code> says something about <i>which</i> kinds of consumers may be assigned to <code>action</code>; could be <code>Constumer&lt;Object&gt;</code> if one wants. Now, <i>if</i> I assigned a <code>Constumer&lt;Object&gt;</code> to <code>action</code> at some point in my program, <code>action.accept(...)</code> would accept <code>Object</code> which is not a functional interface. Thus, from the <i>declared</i> type of <code>action</code> the compiler cannot infer that the actual instance is restricted to functional interfaces, because it might not.
T100 0 u_JimmyB : Btw, I just tried once more and my eclipse Neon actually only suggests <code>accept(Supplier&lt;...&gt; t)</code> while Oxygen on my laptop showed <code>accept(Object t)</code>.
T100 0 u_Holger : @JimmyB there is no need for the target type to be “restricted to functional interfaces”. See, whenever there is a variable or parameter of type <code>X</code>, <code>X</code> being a functional interface, you could also assign <code>Y</code>, a subtype of <code>X</code> not being a functional interface. The variable is never “restricted to functional interfaces”. And once you have assigned the lambda expression to a variable or parameter of a functional interface type, the receiving code could always assign that to a wider type like <code>Object</code>. All that matters is whether the compiler understands what to do before assigning the result.
T100 0 u_Holger : @JimmyB Regarding type erasure, when you write, e.g. <code>Set&lt;Runnable&gt; l = Collections.singleton(() -&gt; System.out.println(&quot;hello&quot;));</code>, you are also passing the lambda expression to a method receiving <code>Object</code> under the cover, as <code>singleton</code> accepts arbitrary types, not even remotely restricted to lambda expression. It’s only our generic (compile-time) usage, i.e. assigning to a <code>Set&lt;Runnable&gt;</code> (which will be just <code>Set</code> after erasure), which determines the lambda’s target type for the compiler.
T100 0 u_JimmyB : @Holger Not sure I get your point. If <code>X</code> is a functional interface, then <code>Y</code> extending <code>X</code> should implicitly be a functional interface too. So whatever I can do on a functional interface <code>X</code>, I can do on <code>Y</code> too.
T100 0 u_ : Supplier<String> s = obj::toString; works, Object o = obj::toString; doesn't. 
